---
title: "Week 11: 策略梯度方法 (Policy Gradient Methods)"
---

# 回顾：基于价值的强化学习 (Value-Based RL)

到目前为止，我们学习的方法（SARSA, Q-Learning, DQN）都属于**基于价值 (Value-Based)** 的强化学习方法。

*   **核心思想:** 学习一个**价值函数**（通常是动作值函数 Q(s, a)），然后**隐式地**从价值函数中推导出策略。
    *   策略通常是相对于 Q 函数的贪心策略（或 ε-greedy）：π(s) = argmax_a Q(s, a)。
*   **代表算法:** Q-Learning, SARSA, DQN。
*   **优点:** 在离散动作空间问题上通常样本效率较高，比较稳定。
*   **局限性:**
    *   **难以处理连续动作空间:** `max_a Q(s, a)` 操作在连续动作空间中难以进行（需要在无限多的动作中找到最大值）。虽然有一些扩展方法（如 DDPG），但基本形式不适用。
    *   **可能学习到确定性策略:** 基于 `argmax` 的策略通常是确定性的。但在某些情况下，最优策略本身就是**随机性**的（例如，在石头剪刀布游戏中，最优策略是随机出拳；或者在部分可观察环境中，需要随机性来处理不确定性）。基于价值的方法难以直接学习随机策略。
    *   **价值函数可能非常复杂:** 有时，最优价值函数可能比最优策略本身复杂得多，学习价值函数可能比直接学习策略更困难。

为了克服这些局限性，我们需要另一类强化学习方法：**策略梯度方法 (Policy Gradient Methods)**。

# 策略梯度方法核心思想：直接学习策略

策略梯度 (Policy Gradient, PG) 方法**直接参数化并优化策略本身**，而不是通过价值函数间接学习。

*   **策略参数化:** 我们用一个带参数 **θ** 的函数 π(a|s, **θ**) 来表示策略。这个函数直接输出在状态 s 下采取动作 a 的概率（对于离散动作）或动作的具体参数（对于连续动作）。
    *   π(a|s, **θ**) = P(A=a | S=s, **θ**)
    *   参数 **θ** 通常是神经网络的权重。
*   **目标:** 找到最优的参数 **θ\***，使得某种性能指标 J(**θ**) 最大化。
    *   性能指标 J(**θ**) 通常定义为遵循策略 π(·|·, **θ**) 的**预期累积回报**（例如，从某个起始状态分布开始的预期回报）。
*   **优化方法:** 使用**梯度上升 (Gradient Ascent)** 来优化参数 **θ**。我们需要计算性能指标 J(**θ**) 相对于参数 **θ** 的梯度 ∇J(**θ**)，然后沿着梯度的方向更新参数：
    *   **θ** ← **θ** + α ∇J(**θ**) (α 是学习率)

**关键问题:** 如何计算策略性能的梯度 ∇J(**θ**)？

# 策略梯度定理 (Policy Gradient Theorem)

策略梯度定理提供了一种计算性能梯度 ∇J(**θ**) 的方法，而**不需要**知道环境动态模型 (P) 或价值函数的导数。这是一个非常重要的理论结果。

该定理表明，性能 J(**θ**) 的梯度可以表示为：

∇J(**θ**) = E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * G_t ]  (用于回合制任务，G_t 是完整回报)

或者更常用的是使用**动作值函数 Qπ(s, a)**：

∇J(**θ**) = E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * Qπ(S_t, A_t) ]

其中：

*   **E_{π_θ} [...]**: 表示在遵循策略 π(·|·, **θ**) 时，对状态和动作分布求期望。
*   **π(A_t|S_t, θ)**: 在状态 S_t 采取动作 A_t 的概率（由当前策略网络给出）。
*   **∇ log π(A_t|S_t, θ)**: 称为 **Score Function**。它表示参数 **θ** 的微小变动对“选择动作 A_t 的对数概率”的影响方向。`log π` 的使用是为了数学上的便利和更好的梯度性质。
*   **G_t** 或 **Qπ(S_t, A_t)**: 对在状态 S_t 采取动作 A_t 后所能获得的**回报的衡量**。它告诉我们这个动作有多好。

**直观理解:**

梯度 ∇J(**θ**) 的计算涉及到两个部分的乘积，并求期望：

1.  **∇ log π(A_t|S_t, θ):** 这个动作 A_t 在当前策略下出现的“可能性”随参数 θ 变化的方向。
2.  **G_t** 或 **Qπ(S_t, A_t):** 这个动作 A_t 最终（或预期）导致的回报有多好。

*   如果一个动作 A_t 导致了**高回报** (G_t 或 Qπ 高)，我们希望**增加**这个动作在状态 S_t 下被选择的概率。梯度上升会调整参数 **θ**，使得 log π(A_t|S_t, **θ**) 沿着 ∇ log π(A_t|S_t, **θ**) 的方向移动，从而增大 π(A_t|S_t, **θ**)。
*   如果一个动作 A_t 导致了**低回报** (G_t 或 Qπ 低)，我们希望**减小**这个动作被选择的概率。梯度上升会调整参数 **θ**，使得 log π(A_t|S_t, **θ**) 沿着 ∇ log π(A_t|S_t, **θ**) 的方向移动，但由于 G_t 或 Qπ 是负的或较小，最终效果是减小 π(A_t|S_t, **θ**)。

**简而言之：增加好动作的概率，降低坏动作的概率。**

# REINFORCE 算法 (蒙特卡洛策略梯度)

REINFORCE 是最基础的策略梯度算法之一，它直接使用策略梯度定理的第一种形式（使用完整回报 G_t）。它是一种**蒙特卡洛 (Monte Carlo)** 方法，因为它需要完整的样本回合来计算回报 G_t。

**算法流程:**

1.  **初始化**策略网络 π(a|s, **θ**) 的参数 **θ**。
2.  **循环**（对于每个回合）：
    a.  使用当前策略 π(·|·, **θ**) 与环境交互，生成一个**完整的回合**: S₀, A₀, R₁, S₁, A₁, R₂, ..., S_{T-1}, A_{T-1}, R_T。
    b.  对于回合中的**每一步** t = 0, 1, ..., T-1：
        i.  计算从该步开始的**未来折扣回报 G_t**: G_t = Σ_{k=t+1}^T γ^{k-t-1} R_k。
        ii. 计算 **Score Function * 回报**: ∇ log π(A_t|S_t, **θ**) * G_t。
    c.  **累加**整个回合的梯度信息（或者使用回合中所有步的平均梯度）。
    d.  **更新策略参数 θ**: **θ** ← **θ** + α * (累加或平均的梯度)。

**REINFORCE 伪代码:**

```
Initialize policy parameter θ arbitrarily
α ← learning rate

Loop forever (for each episode):
  Generate an episode S₀, A₀, R₁, ..., S_{T-1}, A_{T-1}, R_T following π(·|·, θ)
  Loop for each step of the episode t = 0, ..., T-1:
    G ← Σ_{k=t+1}^T γ^{k-t-1} R_k  # Calculate the return from time t
    # Update policy parameter θ using stochastic gradient ascent
    θ ← θ + α * γ^t * G * ∇ log π(A_t|S_t, θ) # γ^t is sometimes included/omitted
```
*(注意: 伪代码中的 γ^t 因子有时会被包含以强调早期状态的重要性，但更常见的形式是直接使用 G_t)*

**REINFORCE 的特点:**

*   **简单:** 算法概念相对直接。
*   **无偏梯度估计:** 使用完整的蒙特卡洛回报 G_t，对梯度的估计是无偏的。
*   **高方差 (High Variance):** 这是 REINFORCE 的主要缺点。回报 G_t 依赖于整个回合的随机性，方差很大。这导致梯度估计的方差也很大，使得训练过程不稳定，收敛速度慢，需要大量的样本回合。
*   **需要完整回合:** 像 MC 方法一样，需要等到回合结束后才能计算 G_t 并进行更新。

# 基线 (Baseline) 的作用：减小方差

为了缓解 REINFORCE (以及其他策略梯度方法) 的高方差问题，一个关键的技术是引入**基线 (Baseline)**。

**思想:** 从回报 G_t (或 Qπ) 中减去一个**不依赖于动作 A_t** 的基线值 b(S_t)，然后再乘以 Score Function。

改进后的梯度估计：
∇J(**θ**) ≈ E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * (**G_t - b(S_t)**) ]
或
∇J(**θ**) ≈ E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * (**Qπ(S_t, A_t) - b(S_t)**) ]

**为什么可行？**
可以证明，只要基线 b(S_t) 不依赖于动作 A_t，减去它**不会改变梯度估计的期望值**（即梯度仍然是无偏的或近似无偏的）。
E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * b(S_t) ] = Σ_s dπ(s) Σ_a π(a|s, θ) ∇ log π(a|s, θ) * b(s)
                                          = Σ_s dπ(s) b(s) Σ_a ∇ π(a|s, θ)
                                          = Σ_s dπ(s) b(s) ∇ [Σ_a π(a|s, θ)]
                                          = Σ_s dπ(s) b(s) ∇ [1] = 0
(其中 dπ(s) 是策略 π 下状态 s 的稳态分布)

**为什么有效？**
通过减去一个基线，我们可以**减小** `(G_t - b(S_t))` 或 `(Qπ - b(S_t))` 的**方差**。

*   **直观解释:** 我们不再是看动作 A_t 的绝对回报 G_t 好不好，而是看它**相对于这个状态 S_t 的平均水平 b(S_t) 来说**好不好。
    *   如果 G_t > b(S_t)，说明动作 A_t 比平均水平好，我们仍然增加其概率。
    *   如果 G_t < b(S_t)，说明动作 A_t 比平均水平差，我们会减小其概率。
    *   如果 G_t ≈ b(S_t)，说明动作 A_t 表现平平，梯度接近于 0，参数更新幅度很小。
*   这使得梯度估计更加集中，减少了随机波动带来的噪声，从而**加速收敛**并**提高稳定性**。

**常用的基线 b(S_t):**
最常用的基线是**状态值函数 Vπ(S_t)**。
b(S_t) = Vπ(S_t) = E_{π_θ} [G_t | S_t = s]

这时，`Qπ(S_t, A_t) - Vπ(S_t)` 被称为**优势函数 (Advantage Function)** Aπ(S_t, A_t)。
Aπ(S_t, A_t) = Qπ(S_t, A_t) - Vπ(S_t)

优势函数衡量了在状态 S_t 采取动作 A_t **比平均情况下好多少**。使用优势函数通常能显著降低策略梯度的方差。

梯度变为：
∇J(**θ**) = E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * Aπ(S_t, A_t) ]

**挑战:** 我们通常也不知道 Vπ(S_t)，所以需要同时学习或估计 Vπ(S_t) 作为基线。这自然地引出了 **Actor-Critic** 方法。

# 策略梯度方法讨论

## 优势

*   **处理连续动作空间:** 策略网络可以直接输出连续动作的参数（例如，高斯分布的均值和标准差），这是基于价值的方法难以做到的。
*   **学习随机策略:** 策略网络可以自然地表示随机策略 π(a|s, θ)，这在某些问题中是必要的。
*   **更好的收敛性质 (某些情况下):** 尽管方差可能大，但策略梯度方法有时比基于价值的方法具有更好的收敛保证（尤其是在函数逼近下）。
*   **可以学习更简单的策略:** 有时最优策略可能比最优价值函数简单得多，直接学习策略可能更容易。

## 劣势

*   **高方差:** 基本的策略梯度方法（如 REINFORCE）梯度估计方差很大，导致收敛慢、不稳定。需要使用基线、Actor-Critic 等技术来缓解。
*   **样本效率通常较低:** 相对于 Off-Policy 的 DQN 等方法，On-Policy 的策略梯度方法通常需要更多的样本才能学习。
*   **容易收敛到局部最优:** 梯度上升可能会陷入局部最优的策略参数。
*   **对超参数敏感:** 学习率、基线的设计等对性能影响较大。

## 引出 Actor-Critic

基本的 REINFORCE 算法使用蒙特卡洛方法估计回报 G_t (或 Qπ)，导致高方差。引入基线 Vπ 可以减小方差，但我们又需要估计 Vπ。

**Actor-Critic 方法** 正是为了解决这个问题而提出的：

*   **Actor (行动者):** 负责**选择动作**。它就是我们上面讨论的策略网络 π(a|s, **θ**)，参数为 **θ**。
*   **Critic (评论家):** 负责**评估动作的好坏**。它学习一个价值函数（通常是状态值函数 V(s, **w**) 或动作值函数 Q(s, a, **w**)），参数为 **w**。Critic 的输出用于指导 Actor 的更新（例如，作为基线或计算优势函数）。

Actor 和 Critic 同时学习和更新：

1.  Actor 根据当前策略 π(·|·, **θ**) 选择动作 A_t。
2.  执行动作，观察 R_{t+1}, S_{t+1}。
3.  Critic 使用 TD 误差等方法更新其价值函数参数 **w** (学习如何更好地评估)。
4.  Actor 使用 Critic 提供的信息（如 TD 误差或优势函数估计）来更新其策略参数 **θ** (学习如何选择更好的动作)。

这种结构结合了策略梯度（Actor 更新）和 TD 学习（Critic 更新）的优点，通常比纯粹的 REINFORCE 或纯粹的价值学习方法更稳定和高效。我们将在下周详细学习 Actor-Critic 方法。

---

**下周预告:** Actor-Critic 方法。我们将学习 Actor-Critic 框架，以及具体的 A2C/A3C 算法概念，并使用 Stable Baselines3 运行 A2C 算法。