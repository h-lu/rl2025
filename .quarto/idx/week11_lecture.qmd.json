{"title":"Week 11: 策略梯度方法 (Policy Gradient Methods)","markdown":{"yaml":{"title":"Week 11: 策略梯度方法 (Policy Gradient Methods)"},"headingText":"回顾：基于价值的强化学习 (Value-Based RL)","containsRefs":false,"markdown":"\n\n\n到目前为止，我们学习的方法（SARSA, Q-Learning, DQN）都属于**基于价值 (Value-Based)** 的强化学习方法。\n\n*   **核心思想:** 学习一个**价值函数**（通常是动作值函数 $Q(s, a)$），然后**隐式地**从价值函数中推导出策略。\n    *   策略通常是相对于 Q 函数的贪心策略（或 $\\epsilon$-greedy）：$\\pi(s) = \\text{argmax}_a Q(s, a)$。\n*   **代表算法:** Q-Learning, SARSA, DQN。\n*   **优点:** 在离散动作空间问题上通常样本效率较高，比较稳定。\n*   **局限性:**\n    *   **难以处理连续动作空间:** $max_a Q(s, a)$ 操作在连续动作空间中难以进行（需要在无限多的动作中找到最大值）。虽然有一些扩展方法（如 DDPG），但基本形式不适用。\n    *   **可能学习到确定性策略:** 基于 `argmax` 的策略通常是确定性的。但在某些情况下，最优策略本身就是**随机性**的（例如，在石头剪刀布游戏中，最优策略是随机出拳；或者在部分可观察环境中，需要随机性来处理不确定性）。基于价值的方法难以直接学习随机策略。\n    *   **价值函数可能非常复杂:** 有时，最优价值函数可能比最优策略本身复杂得多，学习价值函数可能比直接学习策略更困难。\n\n为了克服这些局限性，我们需要另一类强化学习方法：**策略梯度方法 (Policy Gradient Methods)**。\n\n# 策略梯度方法核心思想：直接学习策略\n\n策略梯度 (Policy Gradient, PG) 方法**直接参数化并优化策略本身**，而不是通过价值函数间接学习。\n\n*   **策略参数化:** 我们用一个带参数 $\\theta$ 的函数 $\\pi(a|s, \\theta)$ 来表示策略。这个函数直接输出在状态 $s$ 下采取动作 $a$ 的概率（对于离散动作）或动作的具体参数（对于连续动作）。\n    *   $\\pi(a|s, \\theta) = P(A=a | S=s, \\theta)$\n    *   参数 $\\theta$ 通常是神经网络的权重。\n*   **目标:** 找到最优的参数 $\\theta$，使得某种性能指标 $J(\\theta)$ 最大化。\n    *   性能指标 $J(\\theta)$ 通常定义为遵循策略 $\\pi(·|·, \\theta)$ 的**预期累积回报**（例如，从某个起始状态分布开始的预期回报）。\n*   **优化方法:** 使用**梯度上升 (Gradient Ascent)** 来优化参数 $\\theta$。我们需要计算性能指标 $J(\\theta)$ 相对于参数 $\\theta$ 的梯度 $\\nabla J(\\theta)$，然后沿着梯度的方向更新参数：\n    *   $\\theta \\leftarrow \\theta + \\alpha \\nabla J(\\theta)$ ($\\alpha$ 是学习率)\n\n**关键问题:** 如何计算策略性能的梯度 $\\nabla J(\\theta)$？\n\n# 策略梯度定理 (Policy Gradient Theorem)\n\n我们想通过调整策略的参数 $\\theta$ 来最大化预期回报 $J(\\theta)$。梯度上升告诉我们，更新方向应该是梯度的方向：$\\theta \\leftarrow \\theta + \\alpha \\nabla J(\\theta)$。\n\n那么，**核心问题**就变成了：这个梯度 $\\nabla J(\\theta)$ 究竟是什么？我们如何计算它？\n\n直接计算这个梯度似乎很棘手。因为策略参数 $\\theta$ 的改变，不仅会影响在特定状态下选择某个动作的概率，还会间接影响到我们会进入哪些状态（状态的分布）。想象一下，如果你的策略变了，你可能会更频繁地走到某些奖励高的区域，或者避开某些惩罚多的区域。\n\n::: {.callout-note title=\"策略梯度定理的核心思想\"}\n幸运的是，**策略梯度定理**提供了一个非常巧妙（甚至有点神奇）的方法来计算这个梯度，而**不需要我们去计算策略变化对状态分布的影响**！这极大地简化了问题。\n\n定理告诉我们，性能指标 $J(\\theta)$ 对参数 $\\theta$ 的梯度可以表示为：\n\n$\\nabla J(\\theta) \\approx E_{\\pi_\\theta} [ \\nabla \\log \\pi(A_t|S_t, \\theta) \\cdot \\text{RewardSignal}_t ]$\n\n这里的 $E_{\\pi_\\theta}[\\cdot]$ 表示在当前策略 $\\pi_\\theta$ 下收集的经验的期望。\n:::\n\n::: {.callout-note title=\"为什么可以不考虑策略变化对状态分布的影响？\" collapse=\"true\"}\n这是一个非常好的问题，也是策略梯度定理的神奇之处！\n\n我们知道，策略参数 $\\theta$ 的改变会影响两件事：\n\n1.  在某个状态 $s$ 下选择动作 $a$ 的概率 $\\pi(a|s, \\theta)$。\n2.  智能体访问到不同状态 $s$ 的概率分布 $d^{\\pi_\\theta}(s)$（即哪些状态更容易被访问到）。\n\n如果直接对目标函数 $J(\\theta)$ 求导，我们会发现梯度中既包含了对动作选择概率的导数项 $\\nabla_\\theta \\pi(a|s, \\theta)$，也可能包含了对状态分布的导数项 $\\nabla_\\theta d^{\\pi_\\theta}(s)$。计算后一项（状态分布如何随 $\\theta$ 变化）通常非常复杂和棘手。\n\n**策略梯度定理的精妙之处在于，它通过数学推导证明了，在计算策略梯度时，涉及状态分布变化的那部分梯度项最终会相互抵消或者可以被巧妙地重写，从而使得最终的梯度表达式中不再显式地包含状态分布对 $\\theta$ 的导数 $\\nabla_\\theta d^{\\pi_\\theta}(s)$。**\n\n简单来说，定理告诉我们，我们只需要关注：\n\n*   **当前策略 $\\pi_\\theta$ 下**，我们实际采样到的轨迹中，访问了哪些状态 $S_t$ 并采取了哪些动作 $A_t$。\n*   对于这些 $(S_t, A_t)$，我们如何调整 $\\theta$ 才能**增加**那些导致好的结果（高 $\\text{RewardSignal}_t$）的动作的概率，并**减少**那些导致坏结果的动作的概率。\n\n我们沿着这个计算出来的梯度方向更新 $\\theta$。在下一次迭代中，由于策略 $\\pi_\\theta$ 已经改变，智能体访问状态的分布 $d^{\\pi_\\theta}(s)$ **自然也会随之改变**。然后，我们会基于这个新的状态分布和新的策略，再次计算梯度。\n\n所以，我们并不是说状态分布不重要或者不改变，而是策略梯度定理提供了一个计算梯度的方法，这个方法在**当前这一步**的计算中，不需要我们去显式地计算状态分布是如何随着 $\\theta$ 的微小变化而变化的。这极大地简化了梯度的计算，使得直接优化策略成为可能。\n\n更详细的数学证明可以参考 Sutton & Barto 的《强化学习》第二版第 13.1 和 13.2 节，或者原始论文。\n:::\n\n\n\n::: {.callout-tip collapse=\"true\" title=\"策略梯度定理的原始论文\"}\n策略梯度定理最初由 Richard Sutton 等人在 1999 年的论文《Policy Gradient Methods for Reinforcement Learning with Function Approximation》中提出并证明。\n\n**论文核心贡献:**\n1. 首次严格证明了策略梯度定理的形式\n2. 展示了策略梯度方法可以兼容函数近似（如神经网络）\n3. 为后续策略梯度算法奠定了理论基础\n\n**引用信息:**\nSutton, R. S., McAllester, D. A., Singh, S. P., & Mansour, Y. (1999). Policy gradient methods for reinforcement learning with function approximation. *Advances in neural information processing systems*, 12.\n\n**论文链接:**\n[https://proceedings.neurips.cc/paper/1999/file/464d828b85b0bed98e80ade0a5c43b0f-Paper.pdf](https://proceedings.neurips.cc/paper/1999/file/464d828b85b0bed98e80ade0a5c43b0f-Paper.pdf)\n:::\n\n\n\n让我们来直观地理解一下这个公式的各个部分：\n\n1.  **$\\pi(A_t|S_t, \\theta)$**: 这是我们的策略。在状态 $S_t$ 下，根据参数 $\\theta$ 选择动作 $A_t$ 的概率。\n\n2.  **$\\log \\pi(A_t|S_t, \\theta)$**: 对概率取对数。这在数学和计算上有一些方便之处。\n\n3.  **$\\nabla \\log \\pi(A_t|S_t, \\theta)$**: 这部分通常被称为 **Score Function**。\n    *   **方向性**：它告诉我们，**参数 $\\theta$ 应该往哪个方向调整，才能使得动作 $A_t$ 在状态 $S_t$ 下被选中的概率增大**。\n    *   可以把它想象成一个\"指针\"，指向参数空间中能让 $A_t$ 更可能发生的方向。\n\n4.  **$\\text{RewardSignal}_t$**: 这是对动作 $A_t$ 好坏的衡量。\n    *   这个\"奖励信号\"告诉我们，在状态 $S_t$ 执行动作 $A_t$ 之后，我们最终得到了多少回报。\n    *   这个信号越好（比如，获得了很高的累积回报），我们就越希望增加 $A_t$ 的概率。\n    *   如果信号很差（比如，导致了很低的累积回报），我们就希望减小 $A_t$ 的概率。\n\n**策略梯度定理的两种常见形式，主要区别在于如何定义 $\\text{RewardSignal}_t$：**\n\n::: {.callout-tip collapse=\"true\" title=\"形式一：使用完整的回合回报 $G_t$\"}\n$\\nabla J(\\theta) = E_{\\pi_\\theta} [ \\sum_{t=0}^{T-1} \\nabla \\log \\pi(A_t|S_t, \\theta) \\cdot G_t ]$\n\n*   这里的 $G_t = \\sum_{k=t+1}^{T} \\gamma^{k-t-1} R_k$ 是从时间步 $t$ 开始，直到回合结束的**完整未来折扣回报**。\n*   **直观理解**: 如果在 $S_t$ 采取的动作 $A_t$ 最终导致了很高的总回报 $G_t$，那么我们就沿着 $\\nabla \\log \\pi(A_t|S_t, \\theta)$ 的方向更新 $\\theta$，使得将来在 $S_t$ 更倾向于选择 $A_t$。反之，如果 $G_t$ 很低，更新就会朝相反方向，降低选择 $A_t$ 的概率。\n*   这是 REINFORCE 算法使用的形式。\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"形式二：使用动作价值函数 $Q^{\\pi}(s, a)$\"}\n$\\nabla J(\\theta) = E_{\\pi_\\theta} [ \\nabla \\log \\pi(A_t|S_t, \\theta) \\cdot Q^{\\pi}(S_t, A_t) ]$\n\n*   这里的 $Q^{\\pi}(S_t, A_t)$ 是在策略 $\\pi$ 下，在状态 $S_t$ 执行动作 $A_t$ 的预期回报。\n*   **直观理解**: 类似地，如果动作 $A_t$ 的价值 $Q^{\\pi}(S_t, A_t)$ 很高，我们就增加选择它的概率。\n*   这种形式在理论上更常见，并且引出了后续很多改进算法，比如 Actor-Critic 方法中会用到对 $Q^{\\pi}(S_t, A_t)$ 的估计。\n:::\n\n::: {.callout-note collapse=\"true\" title=\"两种形式的区别解析\"}\n虽然两种形式看起来相似，但它们在理论和实践上有重要区别：\n\n1. **时间尺度不同**:\n   - 形式一 ($G_t$) 是**蒙特卡洛方法**，必须等到回合结束才能计算完整回报\n   - 形式二 ($Q^\\pi$) 是**时序差分方法**，可以即时估计动作价值，实现单步更新\n\n2. **方差特性**:\n   - $G_t$ 包含从当前时刻到回合结束的所有随机性，方差很大\n   - $Q^\\pi$ 是期望值，已经平均了未来所有可能的轨迹，方差较小\n\n3. **实际应用**:\n   - REINFORCE 使用 $G_t$ 形式，实现简单但收敛慢\n   - Actor-Critic 方法使用 $Q^\\pi$ 形式，需要额外学习价值函数，但更稳定\n\n4. **理论关系**:\n   - $G_t$ 是 $Q^\\pi(S_t,A_t)$ 的一个无偏但高方差的样本估计\n   - 当使用函数近似时，$Q^\\pi$ 形式更易于理论分析\n:::\n\n\n**总结一下策略梯度定理的直观意义：**\n\n我们通过实际运行策略来收集数据。对于收集到的每一个 `(状态, 动作)` 对，我们看看这个动作最终带来了多大的好处 (RewardSignal)。然后，我们调整策略的参数，使得那些带来好处的动作在相应的状态下更有可能被选中，而那些导致坏结果的动作则更不可能被选中。调整的幅度和方向由 Score Function 和 RewardSignal 共同决定。\n\n这个定理是策略梯度方法能够工作的基石。它告诉我们如何通过可观测和可计算的量来估计策略性能的梯度，从而进行优化。\n\n# REINFORCE 算法 (蒙特卡洛策略梯度)\n\nREINFORCE 是最基础的策略梯度算法之一，它直接使用策略梯度定理的第一种形式（使用完整回报 $G_t$）。它是一种**蒙特卡洛 (Monte Carlo)** 方法，因为它需要完整的样本回合来计算回报 $G_t$。\n\n**算法流程:**\n\n1.  **初始化**策略网络 $\\pi(a|s, \\theta)$ 的参数 $\\theta$。\n2.  **循环**（对于每个回合）：\n    a.  使用当前策略 $\\pi(·|·, \\theta)$ 与环境交互，生成一个**完整的回合**: $S_0, A_0, R_1, S_1, A_1, R_2, ..., S_{T-1}, A_{T-1}, R_T$。\n    b.  对于回合中的**每一步** t = 0, 1, ..., T-1：\n        i.  计算从该步开始的**未来折扣回报 $G_t$**: $G_t = \\sum_{k=t+1}^T \\gamma^{k-t-1} R_k$。\n        ii. 计算 **Score Function * 回报**: $\\nabla \\log \\pi(A_t|S_t, \\theta) * G_t$。\n    c.  **累加**整个回合的梯度信息（或者使用回合中所有步的平均梯度）。\n    d.  **更新策略参数 $\\theta$**: $\\theta$ ← $\\theta$ + $\\alpha$ * (累加或平均的梯度)。\n\n::: {.callout-note collapse=\"true\" title=\"关于参数更新频率的说明\" collapse=\"true\"}\n在REINFORCE算法中，参数更新的频率取决于具体实现方式：\n\n1. **经典REINFORCE**（如伪代码所示）：\n   - 每个回合结束后，会对该回合中**所有步骤**计算梯度\n   - 然后**一次性**应用这些梯度的总和/平均来更新参数\n   - 因此是**每个回合更新一次参数**\n\n2. **变体实现**：\n   - 有些实现会为每个步骤单独计算梯度并立即更新（即每步更新）\n   - 但这样会破坏蒙特卡洛方法的性质，因为后续步骤的决策已经受前步更新影响\n   - 因此不推荐这种实现方式\n\n3. **批量更新优势**：\n   - 回合级更新能保证所有梯度都是在相同策略下计算的\n   - 避免了\"非平稳性\"问题（即用不同策略产生的数据来更新当前策略）\n   - 与蒙特卡洛方法的精神一致：使用完整轨迹信息\n\n4. **与TD方法的区别**：\n   - 后续的Actor-Critic方法可以单步更新\n   - 但REINFORCE作为蒙特卡洛方法，需要回合完整信息\n:::\n\n\n**REINFORCE 伪代码:**\n\n```\nInitialize policy parameter θ arbitrarily\nα ← learning rate\n\nLoop forever (for each episode):\n  Generate an episode S₀, A₀, R₁, ..., S_{T-1}, A_{T-1}, R_T following π(·|·, θ)\n  Loop for each step of the episode t = 0, ..., T-1:\n    G ← Σ_{k=t+1}^T γ^{k-t-1} R_k  # Calculate the return from time t\n    # Update policy parameter θ using stochastic gradient ascent\n    θ ← θ + α * γ^t * G * ∇ log π(A_t|S_t, θ) # γ^t is sometimes included/omitted\n```\n*(注意: 伪代码中的 γ^t 因子有时会被包含以强调早期状态的重要性，但更常见的形式是直接使用 G_t)*\n\n**REINFORCE 的特点:**\n\n*   **简单:** 算法概念相对直接。\n*   **无偏梯度估计:** 使用完整的蒙特卡洛回报 $G_t$，对梯度的估计是无偏的。\n*   **高方差 (High Variance):** 这是 REINFORCE 的主要缺点。回报 $G_t$ 依赖于整个回合的随机性，方差很大。这导致梯度估计的方差也很大，使得训练过程不稳定，收敛速度慢，需要大量的样本回合。\n*   **需要完整回合:** 像 MC 方法一样，需要等到回合结束后才能计算 $G_t$ 并进行更新。\n\n# 基线 (Baseline) 的作用：减小方差\n\n为了缓解 REINFORCE (以及其他策略梯度方法) 的高方差问题，一个关键的技术是引入**基线 (Baseline)**。\n\n**思想:** 从回报 $G_t$ (或 $Q_{\\pi}(S_t, A_t)$) 中减去一个**不依赖于动作 $A_t$** 的基线值 $b(S_t)$，然后再乘以 Score Function。\n\n改进后的梯度估计：\n\n$$\\nabla J(\\theta) \\approx E_{\\pi_\\theta} [ \\nabla \\log \\pi(A_t|S_t, \\theta) * (G_t - b(S_t)) ]$$\n或\n$$\\nabla J(\\theta) \\approx E_{\\pi_\\theta} [ \\nabla \\log \\pi(A_t|S_t, \\theta) * (Q_{\\pi}(S_t, A_t) - b(S_t)) ]$$\n\n::: {.callout-note title=\"基线方法的可行性\"}\n可以证明，只要基线 $b(S_t)$ 不依赖于动作 $A_t$，减去它**不会改变梯度估计的期望值**（即梯度仍然是无偏的或近似无偏的）。\n:::\n\n::: {.callout-tip title=\"基线方法的有效性\"}\n通过减去一个基线，我们可以**减小** $(G_t - b(S_t))$ 或 $(Q_{\\pi}(S_t, A_t) - b(S_t))$ 的**方差**。\n\n*   **直观解释:** 我们不再是看动作 $A_t$ 的绝对回报 $G_t$ 好不好，而是看它**相对于这个状态 $S_t$ 的平均水平 $b(S_t)$ 来说**好不好。\n    *   如果 $G_t > b(S_t)$，说明动作 $A_t$ 比平均水平好，我们仍然增加其概率。\n    *   如果 $G_t < b(S_t)$，说明动作 $A_t$ 比平均水平差，我们会减小其概率。\n    *   如果 $G_t \\approx b(S_t)$，说明动作 $A_t$ 表现平平，梯度接近于 0，参数更新幅度很小。\n*   这使得梯度估计更加集中，减少了随机波动带来的噪声，从而**加速收敛**并**提高稳定性**。\n:::\n\n::: {.callout-note title=\"常用的基线 $b(S_t)$\"}\n最常用的基线是**状态值函数 $V_{\\pi}(S_t)$**。\n\n$$b(S_t) = V_{\\pi}(S_t) = E_{π_θ} [G_t | S_t = s]$$\n\n这时，$Q_{\\pi}(S_t, A_t) - V_{\\pi}(S_t)$ 被称为**优势函数 (Advantage Function)** $A_{\\pi}(S_t, A_t)$。\n$$A_{\\pi}(S_t, A_t) = Q_{\\pi}(S_t, A_t) - V_{\\pi}(S_t)$$\n:::\n\n::: {.callout-tip title=\"优势函数的作用\"}\n优势函数衡量了在状态 $S_t$ 采取动作 $A_t$ **比平均情况下好多少**。使用优势函数通常能显著降低策略梯度的方差。\n\n梯度变为：\n$$\\nabla J(\\theta) = E_{π_θ} [ \\nabla \\log \\pi(A_t|S_t, \\theta) * A_{\\pi}(S_t, A_t) ]$$\n:::\n\n::: {.callout-warning title=\"基线方法的挑战\"}\n我们通常也不知道 $V_{\\pi}(S_t)$，所以需要同时学习或估计 $V_{\\pi}(S_t)$ 作为基线。这自然地引出了 **Actor-Critic** 方法。\n:::\n\n# 策略梯度方法讨论\n\n## 优势\n\n*   **处理连续动作空间:** 策略网络可以直接输出连续动作的参数（例如，高斯分布的均值和标准差），这是基于价值的方法难以做到的。\n*   **学习随机策略:** 策略网络可以自然地表示随机策略 $\\pi(a|s, \\theta)$，这在某些问题中是必要的。\n*   **更好的收敛性质 (某些情况下):** 尽管方差可能大，但策略梯度方法有时比基于价值的方法具有更好的收敛保证（尤其是在函数逼近下）。\n*   **可以学习更简单的策略:** 有时最优策略可能比最优价值函数简单得多，直接学习策略可能更容易。\n\n## 劣势\n\n*   **高方差:** 基本的策略梯度方法（如 REINFORCE）梯度估计方差很大，导致收敛慢、不稳定。需要使用基线、Actor-Critic 等技术来缓解。\n*   **样本效率通常较低:** 相对于 Off-Policy 的 DQN 等方法，On-Policy 的策略梯度方法通常需要更多的样本才能学习。\n*   **容易收敛到局部最优:** 梯度上升可能会陷入局部最优的策略参数。\n*   **对超参数敏感:** 学习率、基线的设计等对性能影响较大。\n\n## 引出 Actor-Critic\n\n基本的 REINFORCE 算法使用蒙特卡洛方法估计回报 $G_t$ (或 $Q_{\\pi}$)，导致高方差。引入基线 $V_{\\pi}$ 可以减小方差，但我们又需要估计 $V_{\\pi}$。\n\n**Actor-Critic 方法** 正是为了解决这个问题而提出的：\n\n*   **Actor (行动者):** 负责**选择动作**。它就是我们上面讨论的策略网络 $\\pi(a|s, \\theta)$，参数为 $\\theta$。\n*   **Critic (评论家):** 负责**评估动作的好坏**。它学习一个价值函数（通常是状态值函数 $V(s, w)$ 或动作值函数 $Q(s, a, w)$），参数为 $w$。Critic 的输出用于指导 Actor 的更新（例如，作为基线或计算优势函数）。\n\nActor 和 Critic 同时学习和更新：\n\n1.  Actor 根据当前策略 $\\pi(·|·, \\theta)$ 选择动作 $A_t$。\n2.  执行动作，观察 $R_{t+1}, S_{t+1}$。\n3.  Critic 使用 TD 误差等方法更新其价值函数参数 $w$ (学习如何更好地评估)。\n4.  Actor 使用 Critic 提供的信息（如 TD 误差或优势函数估计）来更新其策略参数 $\\theta$ (学习如何选择更好的动作)。\n\n这种结构结合了策略梯度（Actor 更新）和 TD 学习（Critic 更新）的优点，通常比纯粹的 REINFORCE 或纯粹的价值学习方法更稳定和高效。我们将在下周详细学习 Actor-Critic 方法。\n\n---\n\n**下周预告:** Actor-Critic 方法。我们将学习 Actor-Critic 框架，以及具体的 A2C/A3C 算法概念，并使用 Stable Baselines3 运行 A2C 算法。","srcMarkdownNoYaml":"\n\n# 回顾：基于价值的强化学习 (Value-Based RL)\n\n到目前为止，我们学习的方法（SARSA, Q-Learning, DQN）都属于**基于价值 (Value-Based)** 的强化学习方法。\n\n*   **核心思想:** 学习一个**价值函数**（通常是动作值函数 $Q(s, a)$），然后**隐式地**从价值函数中推导出策略。\n    *   策略通常是相对于 Q 函数的贪心策略（或 $\\epsilon$-greedy）：$\\pi(s) = \\text{argmax}_a Q(s, a)$。\n*   **代表算法:** Q-Learning, SARSA, DQN。\n*   **优点:** 在离散动作空间问题上通常样本效率较高，比较稳定。\n*   **局限性:**\n    *   **难以处理连续动作空间:** $max_a Q(s, a)$ 操作在连续动作空间中难以进行（需要在无限多的动作中找到最大值）。虽然有一些扩展方法（如 DDPG），但基本形式不适用。\n    *   **可能学习到确定性策略:** 基于 `argmax` 的策略通常是确定性的。但在某些情况下，最优策略本身就是**随机性**的（例如，在石头剪刀布游戏中，最优策略是随机出拳；或者在部分可观察环境中，需要随机性来处理不确定性）。基于价值的方法难以直接学习随机策略。\n    *   **价值函数可能非常复杂:** 有时，最优价值函数可能比最优策略本身复杂得多，学习价值函数可能比直接学习策略更困难。\n\n为了克服这些局限性，我们需要另一类强化学习方法：**策略梯度方法 (Policy Gradient Methods)**。\n\n# 策略梯度方法核心思想：直接学习策略\n\n策略梯度 (Policy Gradient, PG) 方法**直接参数化并优化策略本身**，而不是通过价值函数间接学习。\n\n*   **策略参数化:** 我们用一个带参数 $\\theta$ 的函数 $\\pi(a|s, \\theta)$ 来表示策略。这个函数直接输出在状态 $s$ 下采取动作 $a$ 的概率（对于离散动作）或动作的具体参数（对于连续动作）。\n    *   $\\pi(a|s, \\theta) = P(A=a | S=s, \\theta)$\n    *   参数 $\\theta$ 通常是神经网络的权重。\n*   **目标:** 找到最优的参数 $\\theta$，使得某种性能指标 $J(\\theta)$ 最大化。\n    *   性能指标 $J(\\theta)$ 通常定义为遵循策略 $\\pi(·|·, \\theta)$ 的**预期累积回报**（例如，从某个起始状态分布开始的预期回报）。\n*   **优化方法:** 使用**梯度上升 (Gradient Ascent)** 来优化参数 $\\theta$。我们需要计算性能指标 $J(\\theta)$ 相对于参数 $\\theta$ 的梯度 $\\nabla J(\\theta)$，然后沿着梯度的方向更新参数：\n    *   $\\theta \\leftarrow \\theta + \\alpha \\nabla J(\\theta)$ ($\\alpha$ 是学习率)\n\n**关键问题:** 如何计算策略性能的梯度 $\\nabla J(\\theta)$？\n\n# 策略梯度定理 (Policy Gradient Theorem)\n\n我们想通过调整策略的参数 $\\theta$ 来最大化预期回报 $J(\\theta)$。梯度上升告诉我们，更新方向应该是梯度的方向：$\\theta \\leftarrow \\theta + \\alpha \\nabla J(\\theta)$。\n\n那么，**核心问题**就变成了：这个梯度 $\\nabla J(\\theta)$ 究竟是什么？我们如何计算它？\n\n直接计算这个梯度似乎很棘手。因为策略参数 $\\theta$ 的改变，不仅会影响在特定状态下选择某个动作的概率，还会间接影响到我们会进入哪些状态（状态的分布）。想象一下，如果你的策略变了，你可能会更频繁地走到某些奖励高的区域，或者避开某些惩罚多的区域。\n\n::: {.callout-note title=\"策略梯度定理的核心思想\"}\n幸运的是，**策略梯度定理**提供了一个非常巧妙（甚至有点神奇）的方法来计算这个梯度，而**不需要我们去计算策略变化对状态分布的影响**！这极大地简化了问题。\n\n定理告诉我们，性能指标 $J(\\theta)$ 对参数 $\\theta$ 的梯度可以表示为：\n\n$\\nabla J(\\theta) \\approx E_{\\pi_\\theta} [ \\nabla \\log \\pi(A_t|S_t, \\theta) \\cdot \\text{RewardSignal}_t ]$\n\n这里的 $E_{\\pi_\\theta}[\\cdot]$ 表示在当前策略 $\\pi_\\theta$ 下收集的经验的期望。\n:::\n\n::: {.callout-note title=\"为什么可以不考虑策略变化对状态分布的影响？\" collapse=\"true\"}\n这是一个非常好的问题，也是策略梯度定理的神奇之处！\n\n我们知道，策略参数 $\\theta$ 的改变会影响两件事：\n\n1.  在某个状态 $s$ 下选择动作 $a$ 的概率 $\\pi(a|s, \\theta)$。\n2.  智能体访问到不同状态 $s$ 的概率分布 $d^{\\pi_\\theta}(s)$（即哪些状态更容易被访问到）。\n\n如果直接对目标函数 $J(\\theta)$ 求导，我们会发现梯度中既包含了对动作选择概率的导数项 $\\nabla_\\theta \\pi(a|s, \\theta)$，也可能包含了对状态分布的导数项 $\\nabla_\\theta d^{\\pi_\\theta}(s)$。计算后一项（状态分布如何随 $\\theta$ 变化）通常非常复杂和棘手。\n\n**策略梯度定理的精妙之处在于，它通过数学推导证明了，在计算策略梯度时，涉及状态分布变化的那部分梯度项最终会相互抵消或者可以被巧妙地重写，从而使得最终的梯度表达式中不再显式地包含状态分布对 $\\theta$ 的导数 $\\nabla_\\theta d^{\\pi_\\theta}(s)$。**\n\n简单来说，定理告诉我们，我们只需要关注：\n\n*   **当前策略 $\\pi_\\theta$ 下**，我们实际采样到的轨迹中，访问了哪些状态 $S_t$ 并采取了哪些动作 $A_t$。\n*   对于这些 $(S_t, A_t)$，我们如何调整 $\\theta$ 才能**增加**那些导致好的结果（高 $\\text{RewardSignal}_t$）的动作的概率，并**减少**那些导致坏结果的动作的概率。\n\n我们沿着这个计算出来的梯度方向更新 $\\theta$。在下一次迭代中，由于策略 $\\pi_\\theta$ 已经改变，智能体访问状态的分布 $d^{\\pi_\\theta}(s)$ **自然也会随之改变**。然后，我们会基于这个新的状态分布和新的策略，再次计算梯度。\n\n所以，我们并不是说状态分布不重要或者不改变，而是策略梯度定理提供了一个计算梯度的方法，这个方法在**当前这一步**的计算中，不需要我们去显式地计算状态分布是如何随着 $\\theta$ 的微小变化而变化的。这极大地简化了梯度的计算，使得直接优化策略成为可能。\n\n更详细的数学证明可以参考 Sutton & Barto 的《强化学习》第二版第 13.1 和 13.2 节，或者原始论文。\n:::\n\n\n\n::: {.callout-tip collapse=\"true\" title=\"策略梯度定理的原始论文\"}\n策略梯度定理最初由 Richard Sutton 等人在 1999 年的论文《Policy Gradient Methods for Reinforcement Learning with Function Approximation》中提出并证明。\n\n**论文核心贡献:**\n1. 首次严格证明了策略梯度定理的形式\n2. 展示了策略梯度方法可以兼容函数近似（如神经网络）\n3. 为后续策略梯度算法奠定了理论基础\n\n**引用信息:**\nSutton, R. S., McAllester, D. A., Singh, S. P., & Mansour, Y. (1999). Policy gradient methods for reinforcement learning with function approximation. *Advances in neural information processing systems*, 12.\n\n**论文链接:**\n[https://proceedings.neurips.cc/paper/1999/file/464d828b85b0bed98e80ade0a5c43b0f-Paper.pdf](https://proceedings.neurips.cc/paper/1999/file/464d828b85b0bed98e80ade0a5c43b0f-Paper.pdf)\n:::\n\n\n\n让我们来直观地理解一下这个公式的各个部分：\n\n1.  **$\\pi(A_t|S_t, \\theta)$**: 这是我们的策略。在状态 $S_t$ 下，根据参数 $\\theta$ 选择动作 $A_t$ 的概率。\n\n2.  **$\\log \\pi(A_t|S_t, \\theta)$**: 对概率取对数。这在数学和计算上有一些方便之处。\n\n3.  **$\\nabla \\log \\pi(A_t|S_t, \\theta)$**: 这部分通常被称为 **Score Function**。\n    *   **方向性**：它告诉我们，**参数 $\\theta$ 应该往哪个方向调整，才能使得动作 $A_t$ 在状态 $S_t$ 下被选中的概率增大**。\n    *   可以把它想象成一个\"指针\"，指向参数空间中能让 $A_t$ 更可能发生的方向。\n\n4.  **$\\text{RewardSignal}_t$**: 这是对动作 $A_t$ 好坏的衡量。\n    *   这个\"奖励信号\"告诉我们，在状态 $S_t$ 执行动作 $A_t$ 之后，我们最终得到了多少回报。\n    *   这个信号越好（比如，获得了很高的累积回报），我们就越希望增加 $A_t$ 的概率。\n    *   如果信号很差（比如，导致了很低的累积回报），我们就希望减小 $A_t$ 的概率。\n\n**策略梯度定理的两种常见形式，主要区别在于如何定义 $\\text{RewardSignal}_t$：**\n\n::: {.callout-tip collapse=\"true\" title=\"形式一：使用完整的回合回报 $G_t$\"}\n$\\nabla J(\\theta) = E_{\\pi_\\theta} [ \\sum_{t=0}^{T-1} \\nabla \\log \\pi(A_t|S_t, \\theta) \\cdot G_t ]$\n\n*   这里的 $G_t = \\sum_{k=t+1}^{T} \\gamma^{k-t-1} R_k$ 是从时间步 $t$ 开始，直到回合结束的**完整未来折扣回报**。\n*   **直观理解**: 如果在 $S_t$ 采取的动作 $A_t$ 最终导致了很高的总回报 $G_t$，那么我们就沿着 $\\nabla \\log \\pi(A_t|S_t, \\theta)$ 的方向更新 $\\theta$，使得将来在 $S_t$ 更倾向于选择 $A_t$。反之，如果 $G_t$ 很低，更新就会朝相反方向，降低选择 $A_t$ 的概率。\n*   这是 REINFORCE 算法使用的形式。\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"形式二：使用动作价值函数 $Q^{\\pi}(s, a)$\"}\n$\\nabla J(\\theta) = E_{\\pi_\\theta} [ \\nabla \\log \\pi(A_t|S_t, \\theta) \\cdot Q^{\\pi}(S_t, A_t) ]$\n\n*   这里的 $Q^{\\pi}(S_t, A_t)$ 是在策略 $\\pi$ 下，在状态 $S_t$ 执行动作 $A_t$ 的预期回报。\n*   **直观理解**: 类似地，如果动作 $A_t$ 的价值 $Q^{\\pi}(S_t, A_t)$ 很高，我们就增加选择它的概率。\n*   这种形式在理论上更常见，并且引出了后续很多改进算法，比如 Actor-Critic 方法中会用到对 $Q^{\\pi}(S_t, A_t)$ 的估计。\n:::\n\n::: {.callout-note collapse=\"true\" title=\"两种形式的区别解析\"}\n虽然两种形式看起来相似，但它们在理论和实践上有重要区别：\n\n1. **时间尺度不同**:\n   - 形式一 ($G_t$) 是**蒙特卡洛方法**，必须等到回合结束才能计算完整回报\n   - 形式二 ($Q^\\pi$) 是**时序差分方法**，可以即时估计动作价值，实现单步更新\n\n2. **方差特性**:\n   - $G_t$ 包含从当前时刻到回合结束的所有随机性，方差很大\n   - $Q^\\pi$ 是期望值，已经平均了未来所有可能的轨迹，方差较小\n\n3. **实际应用**:\n   - REINFORCE 使用 $G_t$ 形式，实现简单但收敛慢\n   - Actor-Critic 方法使用 $Q^\\pi$ 形式，需要额外学习价值函数，但更稳定\n\n4. **理论关系**:\n   - $G_t$ 是 $Q^\\pi(S_t,A_t)$ 的一个无偏但高方差的样本估计\n   - 当使用函数近似时，$Q^\\pi$ 形式更易于理论分析\n:::\n\n\n**总结一下策略梯度定理的直观意义：**\n\n我们通过实际运行策略来收集数据。对于收集到的每一个 `(状态, 动作)` 对，我们看看这个动作最终带来了多大的好处 (RewardSignal)。然后，我们调整策略的参数，使得那些带来好处的动作在相应的状态下更有可能被选中，而那些导致坏结果的动作则更不可能被选中。调整的幅度和方向由 Score Function 和 RewardSignal 共同决定。\n\n这个定理是策略梯度方法能够工作的基石。它告诉我们如何通过可观测和可计算的量来估计策略性能的梯度，从而进行优化。\n\n# REINFORCE 算法 (蒙特卡洛策略梯度)\n\nREINFORCE 是最基础的策略梯度算法之一，它直接使用策略梯度定理的第一种形式（使用完整回报 $G_t$）。它是一种**蒙特卡洛 (Monte Carlo)** 方法，因为它需要完整的样本回合来计算回报 $G_t$。\n\n**算法流程:**\n\n1.  **初始化**策略网络 $\\pi(a|s, \\theta)$ 的参数 $\\theta$。\n2.  **循环**（对于每个回合）：\n    a.  使用当前策略 $\\pi(·|·, \\theta)$ 与环境交互，生成一个**完整的回合**: $S_0, A_0, R_1, S_1, A_1, R_2, ..., S_{T-1}, A_{T-1}, R_T$。\n    b.  对于回合中的**每一步** t = 0, 1, ..., T-1：\n        i.  计算从该步开始的**未来折扣回报 $G_t$**: $G_t = \\sum_{k=t+1}^T \\gamma^{k-t-1} R_k$。\n        ii. 计算 **Score Function * 回报**: $\\nabla \\log \\pi(A_t|S_t, \\theta) * G_t$。\n    c.  **累加**整个回合的梯度信息（或者使用回合中所有步的平均梯度）。\n    d.  **更新策略参数 $\\theta$**: $\\theta$ ← $\\theta$ + $\\alpha$ * (累加或平均的梯度)。\n\n::: {.callout-note collapse=\"true\" title=\"关于参数更新频率的说明\" collapse=\"true\"}\n在REINFORCE算法中，参数更新的频率取决于具体实现方式：\n\n1. **经典REINFORCE**（如伪代码所示）：\n   - 每个回合结束后，会对该回合中**所有步骤**计算梯度\n   - 然后**一次性**应用这些梯度的总和/平均来更新参数\n   - 因此是**每个回合更新一次参数**\n\n2. **变体实现**：\n   - 有些实现会为每个步骤单独计算梯度并立即更新（即每步更新）\n   - 但这样会破坏蒙特卡洛方法的性质，因为后续步骤的决策已经受前步更新影响\n   - 因此不推荐这种实现方式\n\n3. **批量更新优势**：\n   - 回合级更新能保证所有梯度都是在相同策略下计算的\n   - 避免了\"非平稳性\"问题（即用不同策略产生的数据来更新当前策略）\n   - 与蒙特卡洛方法的精神一致：使用完整轨迹信息\n\n4. **与TD方法的区别**：\n   - 后续的Actor-Critic方法可以单步更新\n   - 但REINFORCE作为蒙特卡洛方法，需要回合完整信息\n:::\n\n\n**REINFORCE 伪代码:**\n\n```\nInitialize policy parameter θ arbitrarily\nα ← learning rate\n\nLoop forever (for each episode):\n  Generate an episode S₀, A₀, R₁, ..., S_{T-1}, A_{T-1}, R_T following π(·|·, θ)\n  Loop for each step of the episode t = 0, ..., T-1:\n    G ← Σ_{k=t+1}^T γ^{k-t-1} R_k  # Calculate the return from time t\n    # Update policy parameter θ using stochastic gradient ascent\n    θ ← θ + α * γ^t * G * ∇ log π(A_t|S_t, θ) # γ^t is sometimes included/omitted\n```\n*(注意: 伪代码中的 γ^t 因子有时会被包含以强调早期状态的重要性，但更常见的形式是直接使用 G_t)*\n\n**REINFORCE 的特点:**\n\n*   **简单:** 算法概念相对直接。\n*   **无偏梯度估计:** 使用完整的蒙特卡洛回报 $G_t$，对梯度的估计是无偏的。\n*   **高方差 (High Variance):** 这是 REINFORCE 的主要缺点。回报 $G_t$ 依赖于整个回合的随机性，方差很大。这导致梯度估计的方差也很大，使得训练过程不稳定，收敛速度慢，需要大量的样本回合。\n*   **需要完整回合:** 像 MC 方法一样，需要等到回合结束后才能计算 $G_t$ 并进行更新。\n\n# 基线 (Baseline) 的作用：减小方差\n\n为了缓解 REINFORCE (以及其他策略梯度方法) 的高方差问题，一个关键的技术是引入**基线 (Baseline)**。\n\n**思想:** 从回报 $G_t$ (或 $Q_{\\pi}(S_t, A_t)$) 中减去一个**不依赖于动作 $A_t$** 的基线值 $b(S_t)$，然后再乘以 Score Function。\n\n改进后的梯度估计：\n\n$$\\nabla J(\\theta) \\approx E_{\\pi_\\theta} [ \\nabla \\log \\pi(A_t|S_t, \\theta) * (G_t - b(S_t)) ]$$\n或\n$$\\nabla J(\\theta) \\approx E_{\\pi_\\theta} [ \\nabla \\log \\pi(A_t|S_t, \\theta) * (Q_{\\pi}(S_t, A_t) - b(S_t)) ]$$\n\n::: {.callout-note title=\"基线方法的可行性\"}\n可以证明，只要基线 $b(S_t)$ 不依赖于动作 $A_t$，减去它**不会改变梯度估计的期望值**（即梯度仍然是无偏的或近似无偏的）。\n:::\n\n::: {.callout-tip title=\"基线方法的有效性\"}\n通过减去一个基线，我们可以**减小** $(G_t - b(S_t))$ 或 $(Q_{\\pi}(S_t, A_t) - b(S_t))$ 的**方差**。\n\n*   **直观解释:** 我们不再是看动作 $A_t$ 的绝对回报 $G_t$ 好不好，而是看它**相对于这个状态 $S_t$ 的平均水平 $b(S_t)$ 来说**好不好。\n    *   如果 $G_t > b(S_t)$，说明动作 $A_t$ 比平均水平好，我们仍然增加其概率。\n    *   如果 $G_t < b(S_t)$，说明动作 $A_t$ 比平均水平差，我们会减小其概率。\n    *   如果 $G_t \\approx b(S_t)$，说明动作 $A_t$ 表现平平，梯度接近于 0，参数更新幅度很小。\n*   这使得梯度估计更加集中，减少了随机波动带来的噪声，从而**加速收敛**并**提高稳定性**。\n:::\n\n::: {.callout-note title=\"常用的基线 $b(S_t)$\"}\n最常用的基线是**状态值函数 $V_{\\pi}(S_t)$**。\n\n$$b(S_t) = V_{\\pi}(S_t) = E_{π_θ} [G_t | S_t = s]$$\n\n这时，$Q_{\\pi}(S_t, A_t) - V_{\\pi}(S_t)$ 被称为**优势函数 (Advantage Function)** $A_{\\pi}(S_t, A_t)$。\n$$A_{\\pi}(S_t, A_t) = Q_{\\pi}(S_t, A_t) - V_{\\pi}(S_t)$$\n:::\n\n::: {.callout-tip title=\"优势函数的作用\"}\n优势函数衡量了在状态 $S_t$ 采取动作 $A_t$ **比平均情况下好多少**。使用优势函数通常能显著降低策略梯度的方差。\n\n梯度变为：\n$$\\nabla J(\\theta) = E_{π_θ} [ \\nabla \\log \\pi(A_t|S_t, \\theta) * A_{\\pi}(S_t, A_t) ]$$\n:::\n\n::: {.callout-warning title=\"基线方法的挑战\"}\n我们通常也不知道 $V_{\\pi}(S_t)$，所以需要同时学习或估计 $V_{\\pi}(S_t)$ 作为基线。这自然地引出了 **Actor-Critic** 方法。\n:::\n\n# 策略梯度方法讨论\n\n## 优势\n\n*   **处理连续动作空间:** 策略网络可以直接输出连续动作的参数（例如，高斯分布的均值和标准差），这是基于价值的方法难以做到的。\n*   **学习随机策略:** 策略网络可以自然地表示随机策略 $\\pi(a|s, \\theta)$，这在某些问题中是必要的。\n*   **更好的收敛性质 (某些情况下):** 尽管方差可能大，但策略梯度方法有时比基于价值的方法具有更好的收敛保证（尤其是在函数逼近下）。\n*   **可以学习更简单的策略:** 有时最优策略可能比最优价值函数简单得多，直接学习策略可能更容易。\n\n## 劣势\n\n*   **高方差:** 基本的策略梯度方法（如 REINFORCE）梯度估计方差很大，导致收敛慢、不稳定。需要使用基线、Actor-Critic 等技术来缓解。\n*   **样本效率通常较低:** 相对于 Off-Policy 的 DQN 等方法，On-Policy 的策略梯度方法通常需要更多的样本才能学习。\n*   **容易收敛到局部最优:** 梯度上升可能会陷入局部最优的策略参数。\n*   **对超参数敏感:** 学习率、基线的设计等对性能影响较大。\n\n## 引出 Actor-Critic\n\n基本的 REINFORCE 算法使用蒙特卡洛方法估计回报 $G_t$ (或 $Q_{\\pi}$)，导致高方差。引入基线 $V_{\\pi}$ 可以减小方差，但我们又需要估计 $V_{\\pi}$。\n\n**Actor-Critic 方法** 正是为了解决这个问题而提出的：\n\n*   **Actor (行动者):** 负责**选择动作**。它就是我们上面讨论的策略网络 $\\pi(a|s, \\theta)$，参数为 $\\theta$。\n*   **Critic (评论家):** 负责**评估动作的好坏**。它学习一个价值函数（通常是状态值函数 $V(s, w)$ 或动作值函数 $Q(s, a, w)$），参数为 $w$。Critic 的输出用于指导 Actor 的更新（例如，作为基线或计算优势函数）。\n\nActor 和 Critic 同时学习和更新：\n\n1.  Actor 根据当前策略 $\\pi(·|·, \\theta)$ 选择动作 $A_t$。\n2.  执行动作，观察 $R_{t+1}, S_{t+1}$。\n3.  Critic 使用 TD 误差等方法更新其价值函数参数 $w$ (学习如何更好地评估)。\n4.  Actor 使用 Critic 提供的信息（如 TD 误差或优势函数估计）来更新其策略参数 $\\theta$ (学习如何选择更好的动作)。\n\n这种结构结合了策略梯度（Actor 更新）和 TD 学习（Critic 更新）的优点，通常比纯粹的 REINFORCE 或纯粹的价值学习方法更稳定和高效。我们将在下周详细学习 Actor-Critic 方法。\n\n---\n\n**下周预告:** Actor-Critic 方法。我们将学习 Actor-Critic 框架，以及具体的 A2C/A3C 算法概念，并使用 Stable Baselines3 运行 A2C 算法。"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles/custom.css"],"toc":true,"number-sections":false,"include-in-header":[{"text":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\" integrity=\"sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xkm/sYwpb+ilR5gUw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\">\n"}],"output-file":"week11_lecture.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","callout-appearance":"none","title":"Week 11: 策略梯度方法 (Policy Gradient Methods)"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}