{"title":"Week 11: 策略梯度方法 (Policy Gradient Methods)","markdown":{"yaml":{"title":"Week 11: 策略梯度方法 (Policy Gradient Methods)"},"headingText":"回顾：基于价值的强化学习 (Value-Based RL)","containsRefs":false,"markdown":"\n\n\n到目前为止，我们学习的方法（SARSA, Q-Learning, DQN）都属于**基于价值 (Value-Based)** 的强化学习方法。\n\n*   **核心思想:** 学习一个**价值函数**（通常是动作值函数 Q(s, a)），然后**隐式地**从价值函数中推导出策略。\n    *   策略通常是相对于 Q 函数的贪心策略（或 ε-greedy）：π(s) = argmax_a Q(s, a)。\n*   **代表算法:** Q-Learning, SARSA, DQN。\n*   **优点:** 在离散动作空间问题上通常样本效率较高，比较稳定。\n*   **局限性:**\n    *   **难以处理连续动作空间:** `max_a Q(s, a)` 操作在连续动作空间中难以进行（需要在无限多的动作中找到最大值）。虽然有一些扩展方法（如 DDPG），但基本形式不适用。\n    *   **可能学习到确定性策略:** 基于 `argmax` 的策略通常是确定性的。但在某些情况下，最优策略本身就是**随机性**的（例如，在石头剪刀布游戏中，最优策略是随机出拳；或者在部分可观察环境中，需要随机性来处理不确定性）。基于价值的方法难以直接学习随机策略。\n    *   **价值函数可能非常复杂:** 有时，最优价值函数可能比最优策略本身复杂得多，学习价值函数可能比直接学习策略更困难。\n\n为了克服这些局限性，我们需要另一类强化学习方法：**策略梯度方法 (Policy Gradient Methods)**。\n\n# 策略梯度方法核心思想：直接学习策略\n\n策略梯度 (Policy Gradient, PG) 方法**直接参数化并优化策略本身**，而不是通过价值函数间接学习。\n\n*   **策略参数化:** 我们用一个带参数 **θ** 的函数 π(a|s, **θ**) 来表示策略。这个函数直接输出在状态 s 下采取动作 a 的概率（对于离散动作）或动作的具体参数（对于连续动作）。\n    *   π(a|s, **θ**) = P(A=a | S=s, **θ**)\n    *   参数 **θ** 通常是神经网络的权重。\n*   **目标:** 找到最优的参数 **θ\\***，使得某种性能指标 J(**θ**) 最大化。\n    *   性能指标 J(**θ**) 通常定义为遵循策略 π(·|·, **θ**) 的**预期累积回报**（例如，从某个起始状态分布开始的预期回报）。\n*   **优化方法:** 使用**梯度上升 (Gradient Ascent)** 来优化参数 **θ**。我们需要计算性能指标 J(**θ**) 相对于参数 **θ** 的梯度 ∇J(**θ**)，然后沿着梯度的方向更新参数：\n    *   **θ** ← **θ** + α ∇J(**θ**) (α 是学习率)\n\n**关键问题:** 如何计算策略性能的梯度 ∇J(**θ**)？\n\n# 策略梯度定理 (Policy Gradient Theorem)\n\n策略梯度定理提供了一种计算性能梯度 ∇J(**θ**) 的方法，而**不需要**知道环境动态模型 (P) 或价值函数的导数。这是一个非常重要的理论结果。\n\n该定理表明，性能 J(**θ**) 的梯度可以表示为：\n\n∇J(**θ**) = E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * G_t ]  (用于回合制任务，G_t 是完整回报)\n\n或者更常用的是使用**动作值函数 Qπ(s, a)**：\n\n∇J(**θ**) = E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * Qπ(S_t, A_t) ]\n\n其中：\n\n*   **E_{π_θ} [...]**: 表示在遵循策略 π(·|·, **θ**) 时，对状态和动作分布求期望。\n*   **π(A_t|S_t, θ)**: 在状态 S_t 采取动作 A_t 的概率（由当前策略网络给出）。\n*   **∇ log π(A_t|S_t, θ)**: 称为 **Score Function**。它表示参数 **θ** 的微小变动对“选择动作 A_t 的对数概率”的影响方向。`log π` 的使用是为了数学上的便利和更好的梯度性质。\n*   **G_t** 或 **Qπ(S_t, A_t)**: 对在状态 S_t 采取动作 A_t 后所能获得的**回报的衡量**。它告诉我们这个动作有多好。\n\n**直观理解:**\n\n梯度 ∇J(**θ**) 的计算涉及到两个部分的乘积，并求期望：\n\n1.  **∇ log π(A_t|S_t, θ):** 这个动作 A_t 在当前策略下出现的“可能性”随参数 θ 变化的方向。\n2.  **G_t** 或 **Qπ(S_t, A_t):** 这个动作 A_t 最终（或预期）导致的回报有多好。\n\n*   如果一个动作 A_t 导致了**高回报** (G_t 或 Qπ 高)，我们希望**增加**这个动作在状态 S_t 下被选择的概率。梯度上升会调整参数 **θ**，使得 log π(A_t|S_t, **θ**) 沿着 ∇ log π(A_t|S_t, **θ**) 的方向移动，从而增大 π(A_t|S_t, **θ**)。\n*   如果一个动作 A_t 导致了**低回报** (G_t 或 Qπ 低)，我们希望**减小**这个动作被选择的概率。梯度上升会调整参数 **θ**，使得 log π(A_t|S_t, **θ**) 沿着 ∇ log π(A_t|S_t, **θ**) 的方向移动，但由于 G_t 或 Qπ 是负的或较小，最终效果是减小 π(A_t|S_t, **θ**)。\n\n**简而言之：增加好动作的概率，降低坏动作的概率。**\n\n# REINFORCE 算法 (蒙特卡洛策略梯度)\n\nREINFORCE 是最基础的策略梯度算法之一，它直接使用策略梯度定理的第一种形式（使用完整回报 G_t）。它是一种**蒙特卡洛 (Monte Carlo)** 方法，因为它需要完整的样本回合来计算回报 G_t。\n\n**算法流程:**\n\n1.  **初始化**策略网络 π(a|s, **θ**) 的参数 **θ**。\n2.  **循环**（对于每个回合）：\n    a.  使用当前策略 π(·|·, **θ**) 与环境交互，生成一个**完整的回合**: S₀, A₀, R₁, S₁, A₁, R₂, ..., S_{T-1}, A_{T-1}, R_T。\n    b.  对于回合中的**每一步** t = 0, 1, ..., T-1：\n        i.  计算从该步开始的**未来折扣回报 G_t**: G_t = Σ_{k=t+1}^T γ^{k-t-1} R_k。\n        ii. 计算 **Score Function * 回报**: ∇ log π(A_t|S_t, **θ**) * G_t。\n    c.  **累加**整个回合的梯度信息（或者使用回合中所有步的平均梯度）。\n    d.  **更新策略参数 θ**: **θ** ← **θ** + α * (累加或平均的梯度)。\n\n**REINFORCE 伪代码:**\n\n```\nInitialize policy parameter θ arbitrarily\nα ← learning rate\n\nLoop forever (for each episode):\n  Generate an episode S₀, A₀, R₁, ..., S_{T-1}, A_{T-1}, R_T following π(·|·, θ)\n  Loop for each step of the episode t = 0, ..., T-1:\n    G ← Σ_{k=t+1}^T γ^{k-t-1} R_k  # Calculate the return from time t\n    # Update policy parameter θ using stochastic gradient ascent\n    θ ← θ + α * γ^t * G * ∇ log π(A_t|S_t, θ) # γ^t is sometimes included/omitted\n```\n*(注意: 伪代码中的 γ^t 因子有时会被包含以强调早期状态的重要性，但更常见的形式是直接使用 G_t)*\n\n**REINFORCE 的特点:**\n\n*   **简单:** 算法概念相对直接。\n*   **无偏梯度估计:** 使用完整的蒙特卡洛回报 G_t，对梯度的估计是无偏的。\n*   **高方差 (High Variance):** 这是 REINFORCE 的主要缺点。回报 G_t 依赖于整个回合的随机性，方差很大。这导致梯度估计的方差也很大，使得训练过程不稳定，收敛速度慢，需要大量的样本回合。\n*   **需要完整回合:** 像 MC 方法一样，需要等到回合结束后才能计算 G_t 并进行更新。\n\n# 基线 (Baseline) 的作用：减小方差\n\n为了缓解 REINFORCE (以及其他策略梯度方法) 的高方差问题，一个关键的技术是引入**基线 (Baseline)**。\n\n**思想:** 从回报 G_t (或 Qπ) 中减去一个**不依赖于动作 A_t** 的基线值 b(S_t)，然后再乘以 Score Function。\n\n改进后的梯度估计：\n∇J(**θ**) ≈ E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * (**G_t - b(S_t)**) ]\n或\n∇J(**θ**) ≈ E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * (**Qπ(S_t, A_t) - b(S_t)**) ]\n\n**为什么可行？**\n可以证明，只要基线 b(S_t) 不依赖于动作 A_t，减去它**不会改变梯度估计的期望值**（即梯度仍然是无偏的或近似无偏的）。\nE_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * b(S_t) ] = Σ_s dπ(s) Σ_a π(a|s, θ) ∇ log π(a|s, θ) * b(s)\n                                          = Σ_s dπ(s) b(s) Σ_a ∇ π(a|s, θ)\n                                          = Σ_s dπ(s) b(s) ∇ [Σ_a π(a|s, θ)]\n                                          = Σ_s dπ(s) b(s) ∇ [1] = 0\n(其中 dπ(s) 是策略 π 下状态 s 的稳态分布)\n\n**为什么有效？**\n通过减去一个基线，我们可以**减小** `(G_t - b(S_t))` 或 `(Qπ - b(S_t))` 的**方差**。\n\n*   **直观解释:** 我们不再是看动作 A_t 的绝对回报 G_t 好不好，而是看它**相对于这个状态 S_t 的平均水平 b(S_t) 来说**好不好。\n    *   如果 G_t > b(S_t)，说明动作 A_t 比平均水平好，我们仍然增加其概率。\n    *   如果 G_t < b(S_t)，说明动作 A_t 比平均水平差，我们会减小其概率。\n    *   如果 G_t ≈ b(S_t)，说明动作 A_t 表现平平，梯度接近于 0，参数更新幅度很小。\n*   这使得梯度估计更加集中，减少了随机波动带来的噪声，从而**加速收敛**并**提高稳定性**。\n\n**常用的基线 b(S_t):**\n最常用的基线是**状态值函数 Vπ(S_t)**。\nb(S_t) = Vπ(S_t) = E_{π_θ} [G_t | S_t = s]\n\n这时，`Qπ(S_t, A_t) - Vπ(S_t)` 被称为**优势函数 (Advantage Function)** Aπ(S_t, A_t)。\nAπ(S_t, A_t) = Qπ(S_t, A_t) - Vπ(S_t)\n\n优势函数衡量了在状态 S_t 采取动作 A_t **比平均情况下好多少**。使用优势函数通常能显著降低策略梯度的方差。\n\n梯度变为：\n∇J(**θ**) = E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * Aπ(S_t, A_t) ]\n\n**挑战:** 我们通常也不知道 Vπ(S_t)，所以需要同时学习或估计 Vπ(S_t) 作为基线。这自然地引出了 **Actor-Critic** 方法。\n\n# 策略梯度方法讨论\n\n## 优势\n\n*   **处理连续动作空间:** 策略网络可以直接输出连续动作的参数（例如，高斯分布的均值和标准差），这是基于价值的方法难以做到的。\n*   **学习随机策略:** 策略网络可以自然地表示随机策略 π(a|s, θ)，这在某些问题中是必要的。\n*   **更好的收敛性质 (某些情况下):** 尽管方差可能大，但策略梯度方法有时比基于价值的方法具有更好的收敛保证（尤其是在函数逼近下）。\n*   **可以学习更简单的策略:** 有时最优策略可能比最优价值函数简单得多，直接学习策略可能更容易。\n\n## 劣势\n\n*   **高方差:** 基本的策略梯度方法（如 REINFORCE）梯度估计方差很大，导致收敛慢、不稳定。需要使用基线、Actor-Critic 等技术来缓解。\n*   **样本效率通常较低:** 相对于 Off-Policy 的 DQN 等方法，On-Policy 的策略梯度方法通常需要更多的样本才能学习。\n*   **容易收敛到局部最优:** 梯度上升可能会陷入局部最优的策略参数。\n*   **对超参数敏感:** 学习率、基线的设计等对性能影响较大。\n\n## 引出 Actor-Critic\n\n基本的 REINFORCE 算法使用蒙特卡洛方法估计回报 G_t (或 Qπ)，导致高方差。引入基线 Vπ 可以减小方差，但我们又需要估计 Vπ。\n\n**Actor-Critic 方法** 正是为了解决这个问题而提出的：\n\n*   **Actor (行动者):** 负责**选择动作**。它就是我们上面讨论的策略网络 π(a|s, **θ**)，参数为 **θ**。\n*   **Critic (评论家):** 负责**评估动作的好坏**。它学习一个价值函数（通常是状态值函数 V(s, **w**) 或动作值函数 Q(s, a, **w**)），参数为 **w**。Critic 的输出用于指导 Actor 的更新（例如，作为基线或计算优势函数）。\n\nActor 和 Critic 同时学习和更新：\n\n1.  Actor 根据当前策略 π(·|·, **θ**) 选择动作 A_t。\n2.  执行动作，观察 R_{t+1}, S_{t+1}。\n3.  Critic 使用 TD 误差等方法更新其价值函数参数 **w** (学习如何更好地评估)。\n4.  Actor 使用 Critic 提供的信息（如 TD 误差或优势函数估计）来更新其策略参数 **θ** (学习如何选择更好的动作)。\n\n这种结构结合了策略梯度（Actor 更新）和 TD 学习（Critic 更新）的优点，通常比纯粹的 REINFORCE 或纯粹的价值学习方法更稳定和高效。我们将在下周详细学习 Actor-Critic 方法。\n\n---\n\n**下周预告:** Actor-Critic 方法。我们将学习 Actor-Critic 框架，以及具体的 A2C/A3C 算法概念，并使用 Stable Baselines3 运行 A2C 算法。","srcMarkdownNoYaml":"\n\n# 回顾：基于价值的强化学习 (Value-Based RL)\n\n到目前为止，我们学习的方法（SARSA, Q-Learning, DQN）都属于**基于价值 (Value-Based)** 的强化学习方法。\n\n*   **核心思想:** 学习一个**价值函数**（通常是动作值函数 Q(s, a)），然后**隐式地**从价值函数中推导出策略。\n    *   策略通常是相对于 Q 函数的贪心策略（或 ε-greedy）：π(s) = argmax_a Q(s, a)。\n*   **代表算法:** Q-Learning, SARSA, DQN。\n*   **优点:** 在离散动作空间问题上通常样本效率较高，比较稳定。\n*   **局限性:**\n    *   **难以处理连续动作空间:** `max_a Q(s, a)` 操作在连续动作空间中难以进行（需要在无限多的动作中找到最大值）。虽然有一些扩展方法（如 DDPG），但基本形式不适用。\n    *   **可能学习到确定性策略:** 基于 `argmax` 的策略通常是确定性的。但在某些情况下，最优策略本身就是**随机性**的（例如，在石头剪刀布游戏中，最优策略是随机出拳；或者在部分可观察环境中，需要随机性来处理不确定性）。基于价值的方法难以直接学习随机策略。\n    *   **价值函数可能非常复杂:** 有时，最优价值函数可能比最优策略本身复杂得多，学习价值函数可能比直接学习策略更困难。\n\n为了克服这些局限性，我们需要另一类强化学习方法：**策略梯度方法 (Policy Gradient Methods)**。\n\n# 策略梯度方法核心思想：直接学习策略\n\n策略梯度 (Policy Gradient, PG) 方法**直接参数化并优化策略本身**，而不是通过价值函数间接学习。\n\n*   **策略参数化:** 我们用一个带参数 **θ** 的函数 π(a|s, **θ**) 来表示策略。这个函数直接输出在状态 s 下采取动作 a 的概率（对于离散动作）或动作的具体参数（对于连续动作）。\n    *   π(a|s, **θ**) = P(A=a | S=s, **θ**)\n    *   参数 **θ** 通常是神经网络的权重。\n*   **目标:** 找到最优的参数 **θ\\***，使得某种性能指标 J(**θ**) 最大化。\n    *   性能指标 J(**θ**) 通常定义为遵循策略 π(·|·, **θ**) 的**预期累积回报**（例如，从某个起始状态分布开始的预期回报）。\n*   **优化方法:** 使用**梯度上升 (Gradient Ascent)** 来优化参数 **θ**。我们需要计算性能指标 J(**θ**) 相对于参数 **θ** 的梯度 ∇J(**θ**)，然后沿着梯度的方向更新参数：\n    *   **θ** ← **θ** + α ∇J(**θ**) (α 是学习率)\n\n**关键问题:** 如何计算策略性能的梯度 ∇J(**θ**)？\n\n# 策略梯度定理 (Policy Gradient Theorem)\n\n策略梯度定理提供了一种计算性能梯度 ∇J(**θ**) 的方法，而**不需要**知道环境动态模型 (P) 或价值函数的导数。这是一个非常重要的理论结果。\n\n该定理表明，性能 J(**θ**) 的梯度可以表示为：\n\n∇J(**θ**) = E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * G_t ]  (用于回合制任务，G_t 是完整回报)\n\n或者更常用的是使用**动作值函数 Qπ(s, a)**：\n\n∇J(**θ**) = E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * Qπ(S_t, A_t) ]\n\n其中：\n\n*   **E_{π_θ} [...]**: 表示在遵循策略 π(·|·, **θ**) 时，对状态和动作分布求期望。\n*   **π(A_t|S_t, θ)**: 在状态 S_t 采取动作 A_t 的概率（由当前策略网络给出）。\n*   **∇ log π(A_t|S_t, θ)**: 称为 **Score Function**。它表示参数 **θ** 的微小变动对“选择动作 A_t 的对数概率”的影响方向。`log π` 的使用是为了数学上的便利和更好的梯度性质。\n*   **G_t** 或 **Qπ(S_t, A_t)**: 对在状态 S_t 采取动作 A_t 后所能获得的**回报的衡量**。它告诉我们这个动作有多好。\n\n**直观理解:**\n\n梯度 ∇J(**θ**) 的计算涉及到两个部分的乘积，并求期望：\n\n1.  **∇ log π(A_t|S_t, θ):** 这个动作 A_t 在当前策略下出现的“可能性”随参数 θ 变化的方向。\n2.  **G_t** 或 **Qπ(S_t, A_t):** 这个动作 A_t 最终（或预期）导致的回报有多好。\n\n*   如果一个动作 A_t 导致了**高回报** (G_t 或 Qπ 高)，我们希望**增加**这个动作在状态 S_t 下被选择的概率。梯度上升会调整参数 **θ**，使得 log π(A_t|S_t, **θ**) 沿着 ∇ log π(A_t|S_t, **θ**) 的方向移动，从而增大 π(A_t|S_t, **θ**)。\n*   如果一个动作 A_t 导致了**低回报** (G_t 或 Qπ 低)，我们希望**减小**这个动作被选择的概率。梯度上升会调整参数 **θ**，使得 log π(A_t|S_t, **θ**) 沿着 ∇ log π(A_t|S_t, **θ**) 的方向移动，但由于 G_t 或 Qπ 是负的或较小，最终效果是减小 π(A_t|S_t, **θ**)。\n\n**简而言之：增加好动作的概率，降低坏动作的概率。**\n\n# REINFORCE 算法 (蒙特卡洛策略梯度)\n\nREINFORCE 是最基础的策略梯度算法之一，它直接使用策略梯度定理的第一种形式（使用完整回报 G_t）。它是一种**蒙特卡洛 (Monte Carlo)** 方法，因为它需要完整的样本回合来计算回报 G_t。\n\n**算法流程:**\n\n1.  **初始化**策略网络 π(a|s, **θ**) 的参数 **θ**。\n2.  **循环**（对于每个回合）：\n    a.  使用当前策略 π(·|·, **θ**) 与环境交互，生成一个**完整的回合**: S₀, A₀, R₁, S₁, A₁, R₂, ..., S_{T-1}, A_{T-1}, R_T。\n    b.  对于回合中的**每一步** t = 0, 1, ..., T-1：\n        i.  计算从该步开始的**未来折扣回报 G_t**: G_t = Σ_{k=t+1}^T γ^{k-t-1} R_k。\n        ii. 计算 **Score Function * 回报**: ∇ log π(A_t|S_t, **θ**) * G_t。\n    c.  **累加**整个回合的梯度信息（或者使用回合中所有步的平均梯度）。\n    d.  **更新策略参数 θ**: **θ** ← **θ** + α * (累加或平均的梯度)。\n\n**REINFORCE 伪代码:**\n\n```\nInitialize policy parameter θ arbitrarily\nα ← learning rate\n\nLoop forever (for each episode):\n  Generate an episode S₀, A₀, R₁, ..., S_{T-1}, A_{T-1}, R_T following π(·|·, θ)\n  Loop for each step of the episode t = 0, ..., T-1:\n    G ← Σ_{k=t+1}^T γ^{k-t-1} R_k  # Calculate the return from time t\n    # Update policy parameter θ using stochastic gradient ascent\n    θ ← θ + α * γ^t * G * ∇ log π(A_t|S_t, θ) # γ^t is sometimes included/omitted\n```\n*(注意: 伪代码中的 γ^t 因子有时会被包含以强调早期状态的重要性，但更常见的形式是直接使用 G_t)*\n\n**REINFORCE 的特点:**\n\n*   **简单:** 算法概念相对直接。\n*   **无偏梯度估计:** 使用完整的蒙特卡洛回报 G_t，对梯度的估计是无偏的。\n*   **高方差 (High Variance):** 这是 REINFORCE 的主要缺点。回报 G_t 依赖于整个回合的随机性，方差很大。这导致梯度估计的方差也很大，使得训练过程不稳定，收敛速度慢，需要大量的样本回合。\n*   **需要完整回合:** 像 MC 方法一样，需要等到回合结束后才能计算 G_t 并进行更新。\n\n# 基线 (Baseline) 的作用：减小方差\n\n为了缓解 REINFORCE (以及其他策略梯度方法) 的高方差问题，一个关键的技术是引入**基线 (Baseline)**。\n\n**思想:** 从回报 G_t (或 Qπ) 中减去一个**不依赖于动作 A_t** 的基线值 b(S_t)，然后再乘以 Score Function。\n\n改进后的梯度估计：\n∇J(**θ**) ≈ E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * (**G_t - b(S_t)**) ]\n或\n∇J(**θ**) ≈ E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * (**Qπ(S_t, A_t) - b(S_t)**) ]\n\n**为什么可行？**\n可以证明，只要基线 b(S_t) 不依赖于动作 A_t，减去它**不会改变梯度估计的期望值**（即梯度仍然是无偏的或近似无偏的）。\nE_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * b(S_t) ] = Σ_s dπ(s) Σ_a π(a|s, θ) ∇ log π(a|s, θ) * b(s)\n                                          = Σ_s dπ(s) b(s) Σ_a ∇ π(a|s, θ)\n                                          = Σ_s dπ(s) b(s) ∇ [Σ_a π(a|s, θ)]\n                                          = Σ_s dπ(s) b(s) ∇ [1] = 0\n(其中 dπ(s) 是策略 π 下状态 s 的稳态分布)\n\n**为什么有效？**\n通过减去一个基线，我们可以**减小** `(G_t - b(S_t))` 或 `(Qπ - b(S_t))` 的**方差**。\n\n*   **直观解释:** 我们不再是看动作 A_t 的绝对回报 G_t 好不好，而是看它**相对于这个状态 S_t 的平均水平 b(S_t) 来说**好不好。\n    *   如果 G_t > b(S_t)，说明动作 A_t 比平均水平好，我们仍然增加其概率。\n    *   如果 G_t < b(S_t)，说明动作 A_t 比平均水平差，我们会减小其概率。\n    *   如果 G_t ≈ b(S_t)，说明动作 A_t 表现平平，梯度接近于 0，参数更新幅度很小。\n*   这使得梯度估计更加集中，减少了随机波动带来的噪声，从而**加速收敛**并**提高稳定性**。\n\n**常用的基线 b(S_t):**\n最常用的基线是**状态值函数 Vπ(S_t)**。\nb(S_t) = Vπ(S_t) = E_{π_θ} [G_t | S_t = s]\n\n这时，`Qπ(S_t, A_t) - Vπ(S_t)` 被称为**优势函数 (Advantage Function)** Aπ(S_t, A_t)。\nAπ(S_t, A_t) = Qπ(S_t, A_t) - Vπ(S_t)\n\n优势函数衡量了在状态 S_t 采取动作 A_t **比平均情况下好多少**。使用优势函数通常能显著降低策略梯度的方差。\n\n梯度变为：\n∇J(**θ**) = E_{π_θ} [ ∇ log π(A_t|S_t, **θ**) * Aπ(S_t, A_t) ]\n\n**挑战:** 我们通常也不知道 Vπ(S_t)，所以需要同时学习或估计 Vπ(S_t) 作为基线。这自然地引出了 **Actor-Critic** 方法。\n\n# 策略梯度方法讨论\n\n## 优势\n\n*   **处理连续动作空间:** 策略网络可以直接输出连续动作的参数（例如，高斯分布的均值和标准差），这是基于价值的方法难以做到的。\n*   **学习随机策略:** 策略网络可以自然地表示随机策略 π(a|s, θ)，这在某些问题中是必要的。\n*   **更好的收敛性质 (某些情况下):** 尽管方差可能大，但策略梯度方法有时比基于价值的方法具有更好的收敛保证（尤其是在函数逼近下）。\n*   **可以学习更简单的策略:** 有时最优策略可能比最优价值函数简单得多，直接学习策略可能更容易。\n\n## 劣势\n\n*   **高方差:** 基本的策略梯度方法（如 REINFORCE）梯度估计方差很大，导致收敛慢、不稳定。需要使用基线、Actor-Critic 等技术来缓解。\n*   **样本效率通常较低:** 相对于 Off-Policy 的 DQN 等方法，On-Policy 的策略梯度方法通常需要更多的样本才能学习。\n*   **容易收敛到局部最优:** 梯度上升可能会陷入局部最优的策略参数。\n*   **对超参数敏感:** 学习率、基线的设计等对性能影响较大。\n\n## 引出 Actor-Critic\n\n基本的 REINFORCE 算法使用蒙特卡洛方法估计回报 G_t (或 Qπ)，导致高方差。引入基线 Vπ 可以减小方差，但我们又需要估计 Vπ。\n\n**Actor-Critic 方法** 正是为了解决这个问题而提出的：\n\n*   **Actor (行动者):** 负责**选择动作**。它就是我们上面讨论的策略网络 π(a|s, **θ**)，参数为 **θ**。\n*   **Critic (评论家):** 负责**评估动作的好坏**。它学习一个价值函数（通常是状态值函数 V(s, **w**) 或动作值函数 Q(s, a, **w**)），参数为 **w**。Critic 的输出用于指导 Actor 的更新（例如，作为基线或计算优势函数）。\n\nActor 和 Critic 同时学习和更新：\n\n1.  Actor 根据当前策略 π(·|·, **θ**) 选择动作 A_t。\n2.  执行动作，观察 R_{t+1}, S_{t+1}。\n3.  Critic 使用 TD 误差等方法更新其价值函数参数 **w** (学习如何更好地评估)。\n4.  Actor 使用 Critic 提供的信息（如 TD 误差或优势函数估计）来更新其策略参数 **θ** (学习如何选择更好的动作)。\n\n这种结构结合了策略梯度（Actor 更新）和 TD 学习（Critic 更新）的优点，通常比纯粹的 REINFORCE 或纯粹的价值学习方法更稳定和高效。我们将在下周详细学习 Actor-Critic 方法。\n\n---\n\n**下周预告:** Actor-Critic 方法。我们将学习 Actor-Critic 框架，以及具体的 A2C/A3C 算法概念，并使用 Stable Baselines3 运行 A2C 算法。"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles/custom.css"],"toc":true,"number-sections":false,"include-in-header":[{"text":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\" integrity=\"sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xkm/sYwpb+ilR5gUw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\">\n"}],"output-file":"week11_lecture.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","callout-appearance":"none","title":"Week 11: 策略梯度方法 (Policy Gradient Methods)"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}