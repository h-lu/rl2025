{"title":"Week 7: 异策略控制 - Q-Learning (重点)","markdown":{"yaml":{"title":"Week 7: 异策略控制 - Q-Learning (重点)"},"headingText":"回顾：同策略 TD 控制 - SARSA","containsRefs":false,"markdown":"\n\n\n上周我们学习了 SARSA 算法：\n\n*   **类别:** 同策略 (On-Policy) TD 控制算法。\n*   **核心:** 使用经验五元组 (S, A, R, S', A') 来更新 Q(S, A)。\n*   **更新规则:** Q(S, A) ← Q(S, A) + α [R + γ Q(S', A') - Q(S, A)]\n*   **特点:**\n    *   学习的是遵循当前（包含探索的）策略 π 的动作值函数。\n    *   更新 Q(S, A) 时，使用的下一个动作 A' 是**实际**根据当前策略 π 在 S' 选择的动作。\n    *   在 CliffWalking 例子中，由于 ε-greedy 策略有时会探索到悬崖边并掉下去，SARSA 为了将这种可能性考虑在内（因为 A' 可能是走向悬崖的动作），倾向于学习一条更保守、远离悬崖的“安全”路径。\n\nSARSA 直接学习并改进它正在执行的策略。但有时我们希望将**行为策略 (Behavior Policy)** 与**目标策略 (Target Policy)** 分开。例如，我们可能想：\n\n*   学习最优策略 π\\* (目标策略，通常是贪心策略)，但使用一个更具探索性的策略 μ (行为策略，如 ε-greedy) 来收集数据。\n*   利用过去收集的经验数据（可能由旧的或其他策略生成）来学习当前的最优策略。\n\n这就引出了**异策略 (Off-Policy)** 学习。\n\n# 异策略 (Off-Policy) 学习思想\n\n**目标:** 学习目标策略 π 的价值函数 (Vπ 或 Qπ)，但使用的是由**另一个**行为策略 μ 生成的数据。\n\n*   **目标策略 (Target Policy) π:** 我们想要评估和改进的策略。通常是我们最终想要得到的最优策略（例如，相对于当前 Q 值的贪心策略）。\n*   **行为策略 (Behavior Policy) μ:** 用于与环境交互、生成经验数据的策略。通常比目标策略更具探索性（例如，ε-greedy 或完全随机），以确保收集到足够多样化的数据，覆盖所有状态和动作。\n\n**关键要求:** 行为策略 μ 必须能够覆盖目标策略 π 可能选择的所有动作。即，如果 π(a|s) > 0，那么必须有 μ(a|s) > 0 (Coverage / Assumption of Coverage)。对于 ε-greedy 行为策略和贪心目标策略，这个条件通常是满足的。\n\n**优点:**\n\n*   **解耦探索与利用:** 可以大胆探索 (μ)，同时学习最优的利用策略 (π)。\n*   **利用历史/离线数据:** 可以重用过去收集的数据，即使这些数据不是由当前目标策略生成的。这对于数据获取成本高的场景（如真实机器人、昂贵的商业实验）非常有价值。\n*   **学习人类或其他智能体的经验:** 可以观察专家演示并从中学习。\n\n**挑战:**\n\n*   算法通常更复杂。\n*   可能具有更高的方差或收敛更慢（尤其是在 π 和 μ 相差很大的情况下）。需要使用**重要性采样 (Importance Sampling)** 等技术来修正分布不匹配的问题（我们暂时不深入细节）。\n\n# Q-Learning: 异策略 TD 控制\n\nQ-Learning 是最著名和广泛使用的**异策略 TD 控制**算法之一。\n\n**核心思想:**\n\n*   直接学习**最优动作值函数 Q\\*(s, a)**，无论遵循何种行为策略 μ 来收集数据。\n*   行为策略 μ (e.g., ε-greedy) 用于选择**实际执行**的动作 A_t 以探索环境。\n*   目标策略 π 是隐式的**贪心策略** (π(s) = argmax_a Q(s, a))，它体现在 Q 值的**更新**过程中。\n\n**Q-Learning 更新规则:**\n\n在时间步 t，智能体处于状态 S_t，根据**行为策略 μ** (e.g., ε-greedy) 选择并执行动作 A_t，观察到奖励 R_{t+1} 和下一个状态 S_{t+1}。\n\nQ-Learning 使用这个四元组 (S_t, A_t, R_{t+1}, S_{t+1}) 来更新 Q(S_t, A_t)：\n\nQ(S_t, A_t) ← Q(S_t, A_t) + α [ R_{t+1} + γ **max_{a'} Q(S_{t+1}, a')** - Q(S_t, A_t) ]\n\n**对比 SARSA 更新规则:**\nQ(S_t, A_t) ← Q(S_t, A_t) + α [ R_{t+1} + γ **Q(S_{t+1}, A_{t+1})** - Q(S_t, A_t) ]\n\n**关键区别:**\n\n*   **TD 目标不同:**\n    *   **SARSA:** 使用 R_{t+1} + γ Q(S_{t+1}, **A_{t+1}**)。这里的 A_{t+1} 是**实际**根据当前行为/目标策略 π (ε-greedy) 在 S_{t+1} 选择的下一个动作。\n    *   **Q-Learning:** 使用 R_{t+1} + γ **max_{a'} Q(S_{t+1}, a')**。这里直接使用了在 S_{t+1} 状态下，当前 Q 值估计中**最优**的动作 a' 对应的 Q 值，**而不管行为策略 μ 实际会选择哪个动作**。\n*   **策略分离:**\n    *   **SARSA:** 行为策略和目标策略是同一个 (e.g., ε-greedy)。更新依赖于实际执行的下一个动作 A'。\n    *   **Q-Learning:** 行为策略 (e.g., ε-greedy) 用于选择动作 A 与环境交互；目标策略 (贪心策略) 隐含在 `max` 操作中，用于更新 Q 值。更新不依赖于实际执行的下一个动作。\n\n::: {.callout-important title=\"Q-Learning 的 Off-Policy 特性\"}\nQ-Learning 的更新不依赖于行为策略 μ 在 S_{t+1} 实际选择的动作 A_{t+1}，而是直接使用了当前估计的最优动作的价值 (`max_{a'} Q(S_{t+1}, a')`)。这使得 Q-Learning 可以学习最优策略 Q\\*，即使行为策略 μ 不是最优的（只要 μ 保证了足够的探索）。\n:::\n\n## Q-Learning 算法伪代码\n\n```\nInitialize:\n  Q(s, a) ← arbitrary values (e.g., 0) for all s ∈ S, a ∈ A(s)\n  α ← learning rate (small positive number)\n  γ ← discount factor (0 ≤ γ ≤ 1)\n  ε ← exploration rate (for behavior policy, e.g., 0.1)\n\nLoop for each episode:\n  Initialize S (first state of episode)\n\n  Loop for each step of episode:\n    # Choose action A using behavior policy derived from Q (e.g., ε-greedy)\n    Choose A from S using ε-greedy(Q)\n\n    # Take action A, observe R, S'\n    Take action A, observe R, S'\n\n    # 核心更新步骤 (Q-Learning)\n    # Find the best Q value for the next state S' (max over next actions a')\n    if S' is terminal:\n        Q_next_max = 0 # No future reward if terminal\n    else:\n        Q_next_max = np.max(Q[S', :]) # max_{a'} Q(S', a')\n\n    td_target = R + γ * Q_next_max\n    td_error = td_target - Q(S, A)\n    Q(S, A) ← Q(S, A) + α * td_error\n\n    S ← S' # Move to the next state\n\n    If S is terminal, break inner loop\n```\n\n**解释:**\n\n1.  初始化 Q(s, a)，学习率 α，折扣因子 γ，探索率 ε (用于行为策略)。\n2.  对于每个回合：\n3.  获取起始状态 S。\n4.  对于回合中的每一步：\n5.  根据当前的 Q 值和**行为策略** (ε-greedy) 选择动作 A。\n6.  执行动作 A，观察到奖励 R 和下一个状态 S'。\n7.  **关键:** 计算在下一个状态 S' 下**可能的最大 Q 值**: `Q_next_max = max_{a'} Q(S', a')` (如果 S' 是终止状态，则为 0)。\n8.  **计算 TD 目标:** `target = R + γ * Q_next_max`。\n9.  **计算 TD 误差:** `δ = target - Q(S, A)`。\n10. **更新 Q 值:** `Q(S, A) ← Q(S, A) + α * δ`。\n11. 将当前状态更新为 S'。\n12. 如果 S' 是终止状态，结束当前回合。\n\n# Lab 5: Q-Learning 实践与 SARSA 对比\n\n## 目标\n\n1.  在 CliffWalking 环境中实现或运行 Q-Learning 算法。\n2.  对比 Q-Learning 和 SARSA 在相同环境下的学习过程（奖励曲线）和最终策略。\n3.  理解 Off-Policy 学习的特点和优势。\n\n## 环境：CliffWalking\n\n继续使用上周的 CliffWalking 环境 (`gym.make(\"CliffWalking-v0\")`)。\n\n## 示例代码框架 (CliffWalking - Q-Learning)\n\n```python\nimport gymnasium as gym\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 创建 CliffWalking 环境\nenv = gym.make(\"CliffWalking-v0\")\n\n# 1. 初始化参数 (与 SARSA 相同或相似，便于比较)\nalpha = 0.1       # 学习率\ngamma = 0.99      # 折扣因子\nepsilon = 0.1     # 探索率 (用于行为策略)\n# epsilon_decay = 0.999\n# min_epsilon = 0.01\nnum_episodes = 500\n\n# 初始化 Q 表\nQ = np.zeros((env.observation_space.n, env.action_space.n))\n\n# 记录每回合奖励\nepisode_rewards = []\n\n# 2. ε-Greedy 策略函数 (与 SARSA 相同，用于选择执行的动作)\ndef choose_action_epsilon_greedy(state, current_epsilon):\n    if np.random.rand() < current_epsilon:\n        return env.action_space.sample()\n    else:\n        q_values = Q[state, :]\n        max_q = np.max(q_values)\n        if np.all(q_values == q_values[0]):\n             return env.action_space.sample()\n        best_actions = np.where(q_values == max_q)[0]\n        return np.random.choice(best_actions)\n\n# 3. Q-Learning 主循环\ncurrent_epsilon = epsilon\nfor i in range(num_episodes):\n    state, info = env.reset()\n    terminated = False\n    truncated = False\n    total_reward = 0\n\n    while not (terminated or truncated):\n        # 使用行为策略 (ε-greedy) 选择动作 A\n        action = choose_action_epsilon_greedy(state, current_epsilon)\n\n        # 执行动作，观察 S', R\n        next_state, reward, terminated, truncated, info = env.step(action)\n\n        # Q-Learning 更新\n        if terminated or truncated:\n            Q_next_max = 0 # 到达终点或截断，未来价值为 0\n        else:\n            Q_next_max = np.max(Q[next_state, :]) # 核心：取下一个状态的最大 Q 值\n\n        td_target = reward + gamma * Q_next_max\n        td_error = td_target - Q[state, action]\n        Q[state, action] = Q[state, action] + alpha * td_error\n\n        state = next_state\n        total_reward += reward\n\n    episode_rewards.append(total_reward)\n\n    # (可选) Epsilon 衰减\n    # current_epsilon = max(min_epsilon, current_epsilon * epsilon_decay)\n\n    if (i + 1) % 100 == 0:\n        print(f\"Episode {i+1}/{num_episodes}, Total Reward: {total_reward}, Epsilon: {current_epsilon:.3f}\")\n\n\n# 4. 可视化学习过程 (奖励曲线)\nplt.figure(figsize=(10, 5))\nplt.plot(episode_rewards)\ntry:\n    import pandas as pd\n    moving_avg = pd.Series(episode_rewards).rolling(window=50).mean()\n    plt.plot(moving_avg, label='Moving Average (window=50)', color='red')\n    plt.legend()\nexcept ImportError:\n    print(\"Pandas not installed, skipping moving average plot.\")\nplt.xlabel(\"Episode\")\nplt.ylabel(\"Total Reward per Episode\")\nplt.title(f\"Q-Learning Learning Curve (ε={epsilon})\")\nplt.grid(True)\nplt.show()\n\n# 5. 可视化最终策略 (与 SARSA 相同)\ndef plot_policy(Q_table, env_shape=(4, 12)):\n    policy_grid = np.empty(env_shape, dtype=str)\n    actions_map = {0: '↑', 1: '→', 2: '↓', 3: '←'} # 上右下左\n\n    for r in range(env_shape[0]):\n        for c in range(env_shape[1]):\n            state = r * env_shape[1] + c\n            # Initialize grid cell\n            policy_grid[r, c] = ''\n\n            if 37 <= state <= 46: policy_grid[r, c] = 'X'; continue # Cliff\n            if state == 47: policy_grid[r, c] = 'G'; continue # Goal\n            if state == 36: policy_grid[r, c] = 'S'; # Start, might be overwritten by arrow\n\n            # Determine best action based on Q-values\n            if np.all(Q_table[state, :] == 0):\n                 # Keep 'S' if it's the start state and Q is zero, otherwise mark as '.'\n                 if state != 36 and policy_grid[r, c] == '':\n                     policy_grid[r, c] = '.'\n            else:\n                best_action = np.argmax(Q_table[state, :])\n                # Overwrite '.' or 'S' with the action arrow\n                policy_grid[r, c] = actions_map[best_action]\n\n\n    plt.figure(figsize=(8, 3))\n    dummy_data = np.zeros(env_shape)\n    dummy_data[3, 1:-1] = -1 # Mark cliff row for coloring\n    sns.heatmap(dummy_data, annot=policy_grid, fmt=\"\", cmap=\"coolwarm\",\n                cbar=False, linewidths=.5, linecolor='black', annot_kws={\"size\": 12})\n    plt.title(\"Learned Policy (Q-Learning)\")\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()\n\nplot_policy(Q)\n\nenv.close()\n```\n\n## 任务与思考\n\n1.  **运行 Q-Learning:** 运行上述 CliffWalking Q-Learning 代码。观察奖励曲线和最终策略。\n2.  **对比 SARSA:**\n    *   **奖励曲线:** 将 Q-Learning 的奖励曲线与上周 SARSA 的奖励曲线（使用相同的 α, γ, ε 参数）进行比较。哪个算法的平均每回合奖励更高？哪个更稳定？\n    *   **最终策略:** 比较 Q-Learning 和 SARSA 学到的最终策略（箭头图）。它们有何不同？Q-Learning 学到的路径是“安全”路径还是“危险”路径（贴着悬崖走）？\n    *   **解释差异:** 为什么 Q-Learning 和 SARSA 在 CliffWalking 中会学到不同的策略？（提示：回顾它们的更新规则，特别是 TD 目标的不同，以及它们如何处理探索动作的影响）。\n3.  **Off-Policy 的优势讨论:**\n    *   如果现在有一批由完全随机策略在 CliffWalking 环境中生成的历史数据 (S, A, R, S')，SARSA 能否直接利用这些数据学习最优策略？Q-Learning 能否？为什么？\n    *   在商业场景中（如在线广告投放、动态定价），使用 Off-Policy 学习（如 Q-Learning）可能有哪些优势？（例如，可以一边用现有稳定策略服务用户，一边利用收集到的数据学习和测试新策略）。\n\n## 提交要求\n\n*   提交你的 Q-Learning 实现代码。\n*   提交 Q-Learning 的奖励曲线图和最终策略可视化图。\n*   提交一份对比分析报告，重点比较 Q-Learning 和 SARSA 的：\n    *   学习过程（奖励曲线）。\n    *   最终策略（路径选择）。\n    *   解释策略差异的原因。\n    *   讨论 Off-Policy 学习相对于 On-Policy 学习的潜在优势，尤其是在商业应用背景下。\n\n---\n\n**下周预告:** Q-Learning 应用讨论与中期回顾。我们将模拟一个简单的商业问题，并复习前半学期的核心概念 (MDP, Bellman, MC, TD, SARSA, Q-Learning)。","srcMarkdownNoYaml":"\n\n# 回顾：同策略 TD 控制 - SARSA\n\n上周我们学习了 SARSA 算法：\n\n*   **类别:** 同策略 (On-Policy) TD 控制算法。\n*   **核心:** 使用经验五元组 (S, A, R, S', A') 来更新 Q(S, A)。\n*   **更新规则:** Q(S, A) ← Q(S, A) + α [R + γ Q(S', A') - Q(S, A)]\n*   **特点:**\n    *   学习的是遵循当前（包含探索的）策略 π 的动作值函数。\n    *   更新 Q(S, A) 时，使用的下一个动作 A' 是**实际**根据当前策略 π 在 S' 选择的动作。\n    *   在 CliffWalking 例子中，由于 ε-greedy 策略有时会探索到悬崖边并掉下去，SARSA 为了将这种可能性考虑在内（因为 A' 可能是走向悬崖的动作），倾向于学习一条更保守、远离悬崖的“安全”路径。\n\nSARSA 直接学习并改进它正在执行的策略。但有时我们希望将**行为策略 (Behavior Policy)** 与**目标策略 (Target Policy)** 分开。例如，我们可能想：\n\n*   学习最优策略 π\\* (目标策略，通常是贪心策略)，但使用一个更具探索性的策略 μ (行为策略，如 ε-greedy) 来收集数据。\n*   利用过去收集的经验数据（可能由旧的或其他策略生成）来学习当前的最优策略。\n\n这就引出了**异策略 (Off-Policy)** 学习。\n\n# 异策略 (Off-Policy) 学习思想\n\n**目标:** 学习目标策略 π 的价值函数 (Vπ 或 Qπ)，但使用的是由**另一个**行为策略 μ 生成的数据。\n\n*   **目标策略 (Target Policy) π:** 我们想要评估和改进的策略。通常是我们最终想要得到的最优策略（例如，相对于当前 Q 值的贪心策略）。\n*   **行为策略 (Behavior Policy) μ:** 用于与环境交互、生成经验数据的策略。通常比目标策略更具探索性（例如，ε-greedy 或完全随机），以确保收集到足够多样化的数据，覆盖所有状态和动作。\n\n**关键要求:** 行为策略 μ 必须能够覆盖目标策略 π 可能选择的所有动作。即，如果 π(a|s) > 0，那么必须有 μ(a|s) > 0 (Coverage / Assumption of Coverage)。对于 ε-greedy 行为策略和贪心目标策略，这个条件通常是满足的。\n\n**优点:**\n\n*   **解耦探索与利用:** 可以大胆探索 (μ)，同时学习最优的利用策略 (π)。\n*   **利用历史/离线数据:** 可以重用过去收集的数据，即使这些数据不是由当前目标策略生成的。这对于数据获取成本高的场景（如真实机器人、昂贵的商业实验）非常有价值。\n*   **学习人类或其他智能体的经验:** 可以观察专家演示并从中学习。\n\n**挑战:**\n\n*   算法通常更复杂。\n*   可能具有更高的方差或收敛更慢（尤其是在 π 和 μ 相差很大的情况下）。需要使用**重要性采样 (Importance Sampling)** 等技术来修正分布不匹配的问题（我们暂时不深入细节）。\n\n# Q-Learning: 异策略 TD 控制\n\nQ-Learning 是最著名和广泛使用的**异策略 TD 控制**算法之一。\n\n**核心思想:**\n\n*   直接学习**最优动作值函数 Q\\*(s, a)**，无论遵循何种行为策略 μ 来收集数据。\n*   行为策略 μ (e.g., ε-greedy) 用于选择**实际执行**的动作 A_t 以探索环境。\n*   目标策略 π 是隐式的**贪心策略** (π(s) = argmax_a Q(s, a))，它体现在 Q 值的**更新**过程中。\n\n**Q-Learning 更新规则:**\n\n在时间步 t，智能体处于状态 S_t，根据**行为策略 μ** (e.g., ε-greedy) 选择并执行动作 A_t，观察到奖励 R_{t+1} 和下一个状态 S_{t+1}。\n\nQ-Learning 使用这个四元组 (S_t, A_t, R_{t+1}, S_{t+1}) 来更新 Q(S_t, A_t)：\n\nQ(S_t, A_t) ← Q(S_t, A_t) + α [ R_{t+1} + γ **max_{a'} Q(S_{t+1}, a')** - Q(S_t, A_t) ]\n\n**对比 SARSA 更新规则:**\nQ(S_t, A_t) ← Q(S_t, A_t) + α [ R_{t+1} + γ **Q(S_{t+1}, A_{t+1})** - Q(S_t, A_t) ]\n\n**关键区别:**\n\n*   **TD 目标不同:**\n    *   **SARSA:** 使用 R_{t+1} + γ Q(S_{t+1}, **A_{t+1}**)。这里的 A_{t+1} 是**实际**根据当前行为/目标策略 π (ε-greedy) 在 S_{t+1} 选择的下一个动作。\n    *   **Q-Learning:** 使用 R_{t+1} + γ **max_{a'} Q(S_{t+1}, a')**。这里直接使用了在 S_{t+1} 状态下，当前 Q 值估计中**最优**的动作 a' 对应的 Q 值，**而不管行为策略 μ 实际会选择哪个动作**。\n*   **策略分离:**\n    *   **SARSA:** 行为策略和目标策略是同一个 (e.g., ε-greedy)。更新依赖于实际执行的下一个动作 A'。\n    *   **Q-Learning:** 行为策略 (e.g., ε-greedy) 用于选择动作 A 与环境交互；目标策略 (贪心策略) 隐含在 `max` 操作中，用于更新 Q 值。更新不依赖于实际执行的下一个动作。\n\n::: {.callout-important title=\"Q-Learning 的 Off-Policy 特性\"}\nQ-Learning 的更新不依赖于行为策略 μ 在 S_{t+1} 实际选择的动作 A_{t+1}，而是直接使用了当前估计的最优动作的价值 (`max_{a'} Q(S_{t+1}, a')`)。这使得 Q-Learning 可以学习最优策略 Q\\*，即使行为策略 μ 不是最优的（只要 μ 保证了足够的探索）。\n:::\n\n## Q-Learning 算法伪代码\n\n```\nInitialize:\n  Q(s, a) ← arbitrary values (e.g., 0) for all s ∈ S, a ∈ A(s)\n  α ← learning rate (small positive number)\n  γ ← discount factor (0 ≤ γ ≤ 1)\n  ε ← exploration rate (for behavior policy, e.g., 0.1)\n\nLoop for each episode:\n  Initialize S (first state of episode)\n\n  Loop for each step of episode:\n    # Choose action A using behavior policy derived from Q (e.g., ε-greedy)\n    Choose A from S using ε-greedy(Q)\n\n    # Take action A, observe R, S'\n    Take action A, observe R, S'\n\n    # 核心更新步骤 (Q-Learning)\n    # Find the best Q value for the next state S' (max over next actions a')\n    if S' is terminal:\n        Q_next_max = 0 # No future reward if terminal\n    else:\n        Q_next_max = np.max(Q[S', :]) # max_{a'} Q(S', a')\n\n    td_target = R + γ * Q_next_max\n    td_error = td_target - Q(S, A)\n    Q(S, A) ← Q(S, A) + α * td_error\n\n    S ← S' # Move to the next state\n\n    If S is terminal, break inner loop\n```\n\n**解释:**\n\n1.  初始化 Q(s, a)，学习率 α，折扣因子 γ，探索率 ε (用于行为策略)。\n2.  对于每个回合：\n3.  获取起始状态 S。\n4.  对于回合中的每一步：\n5.  根据当前的 Q 值和**行为策略** (ε-greedy) 选择动作 A。\n6.  执行动作 A，观察到奖励 R 和下一个状态 S'。\n7.  **关键:** 计算在下一个状态 S' 下**可能的最大 Q 值**: `Q_next_max = max_{a'} Q(S', a')` (如果 S' 是终止状态，则为 0)。\n8.  **计算 TD 目标:** `target = R + γ * Q_next_max`。\n9.  **计算 TD 误差:** `δ = target - Q(S, A)`。\n10. **更新 Q 值:** `Q(S, A) ← Q(S, A) + α * δ`。\n11. 将当前状态更新为 S'。\n12. 如果 S' 是终止状态，结束当前回合。\n\n# Lab 5: Q-Learning 实践与 SARSA 对比\n\n## 目标\n\n1.  在 CliffWalking 环境中实现或运行 Q-Learning 算法。\n2.  对比 Q-Learning 和 SARSA 在相同环境下的学习过程（奖励曲线）和最终策略。\n3.  理解 Off-Policy 学习的特点和优势。\n\n## 环境：CliffWalking\n\n继续使用上周的 CliffWalking 环境 (`gym.make(\"CliffWalking-v0\")`)。\n\n## 示例代码框架 (CliffWalking - Q-Learning)\n\n```python\nimport gymnasium as gym\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 创建 CliffWalking 环境\nenv = gym.make(\"CliffWalking-v0\")\n\n# 1. 初始化参数 (与 SARSA 相同或相似，便于比较)\nalpha = 0.1       # 学习率\ngamma = 0.99      # 折扣因子\nepsilon = 0.1     # 探索率 (用于行为策略)\n# epsilon_decay = 0.999\n# min_epsilon = 0.01\nnum_episodes = 500\n\n# 初始化 Q 表\nQ = np.zeros((env.observation_space.n, env.action_space.n))\n\n# 记录每回合奖励\nepisode_rewards = []\n\n# 2. ε-Greedy 策略函数 (与 SARSA 相同，用于选择执行的动作)\ndef choose_action_epsilon_greedy(state, current_epsilon):\n    if np.random.rand() < current_epsilon:\n        return env.action_space.sample()\n    else:\n        q_values = Q[state, :]\n        max_q = np.max(q_values)\n        if np.all(q_values == q_values[0]):\n             return env.action_space.sample()\n        best_actions = np.where(q_values == max_q)[0]\n        return np.random.choice(best_actions)\n\n# 3. Q-Learning 主循环\ncurrent_epsilon = epsilon\nfor i in range(num_episodes):\n    state, info = env.reset()\n    terminated = False\n    truncated = False\n    total_reward = 0\n\n    while not (terminated or truncated):\n        # 使用行为策略 (ε-greedy) 选择动作 A\n        action = choose_action_epsilon_greedy(state, current_epsilon)\n\n        # 执行动作，观察 S', R\n        next_state, reward, terminated, truncated, info = env.step(action)\n\n        # Q-Learning 更新\n        if terminated or truncated:\n            Q_next_max = 0 # 到达终点或截断，未来价值为 0\n        else:\n            Q_next_max = np.max(Q[next_state, :]) # 核心：取下一个状态的最大 Q 值\n\n        td_target = reward + gamma * Q_next_max\n        td_error = td_target - Q[state, action]\n        Q[state, action] = Q[state, action] + alpha * td_error\n\n        state = next_state\n        total_reward += reward\n\n    episode_rewards.append(total_reward)\n\n    # (可选) Epsilon 衰减\n    # current_epsilon = max(min_epsilon, current_epsilon * epsilon_decay)\n\n    if (i + 1) % 100 == 0:\n        print(f\"Episode {i+1}/{num_episodes}, Total Reward: {total_reward}, Epsilon: {current_epsilon:.3f}\")\n\n\n# 4. 可视化学习过程 (奖励曲线)\nplt.figure(figsize=(10, 5))\nplt.plot(episode_rewards)\ntry:\n    import pandas as pd\n    moving_avg = pd.Series(episode_rewards).rolling(window=50).mean()\n    plt.plot(moving_avg, label='Moving Average (window=50)', color='red')\n    plt.legend()\nexcept ImportError:\n    print(\"Pandas not installed, skipping moving average plot.\")\nplt.xlabel(\"Episode\")\nplt.ylabel(\"Total Reward per Episode\")\nplt.title(f\"Q-Learning Learning Curve (ε={epsilon})\")\nplt.grid(True)\nplt.show()\n\n# 5. 可视化最终策略 (与 SARSA 相同)\ndef plot_policy(Q_table, env_shape=(4, 12)):\n    policy_grid = np.empty(env_shape, dtype=str)\n    actions_map = {0: '↑', 1: '→', 2: '↓', 3: '←'} # 上右下左\n\n    for r in range(env_shape[0]):\n        for c in range(env_shape[1]):\n            state = r * env_shape[1] + c\n            # Initialize grid cell\n            policy_grid[r, c] = ''\n\n            if 37 <= state <= 46: policy_grid[r, c] = 'X'; continue # Cliff\n            if state == 47: policy_grid[r, c] = 'G'; continue # Goal\n            if state == 36: policy_grid[r, c] = 'S'; # Start, might be overwritten by arrow\n\n            # Determine best action based on Q-values\n            if np.all(Q_table[state, :] == 0):\n                 # Keep 'S' if it's the start state and Q is zero, otherwise mark as '.'\n                 if state != 36 and policy_grid[r, c] == '':\n                     policy_grid[r, c] = '.'\n            else:\n                best_action = np.argmax(Q_table[state, :])\n                # Overwrite '.' or 'S' with the action arrow\n                policy_grid[r, c] = actions_map[best_action]\n\n\n    plt.figure(figsize=(8, 3))\n    dummy_data = np.zeros(env_shape)\n    dummy_data[3, 1:-1] = -1 # Mark cliff row for coloring\n    sns.heatmap(dummy_data, annot=policy_grid, fmt=\"\", cmap=\"coolwarm\",\n                cbar=False, linewidths=.5, linecolor='black', annot_kws={\"size\": 12})\n    plt.title(\"Learned Policy (Q-Learning)\")\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()\n\nplot_policy(Q)\n\nenv.close()\n```\n\n## 任务与思考\n\n1.  **运行 Q-Learning:** 运行上述 CliffWalking Q-Learning 代码。观察奖励曲线和最终策略。\n2.  **对比 SARSA:**\n    *   **奖励曲线:** 将 Q-Learning 的奖励曲线与上周 SARSA 的奖励曲线（使用相同的 α, γ, ε 参数）进行比较。哪个算法的平均每回合奖励更高？哪个更稳定？\n    *   **最终策略:** 比较 Q-Learning 和 SARSA 学到的最终策略（箭头图）。它们有何不同？Q-Learning 学到的路径是“安全”路径还是“危险”路径（贴着悬崖走）？\n    *   **解释差异:** 为什么 Q-Learning 和 SARSA 在 CliffWalking 中会学到不同的策略？（提示：回顾它们的更新规则，特别是 TD 目标的不同，以及它们如何处理探索动作的影响）。\n3.  **Off-Policy 的优势讨论:**\n    *   如果现在有一批由完全随机策略在 CliffWalking 环境中生成的历史数据 (S, A, R, S')，SARSA 能否直接利用这些数据学习最优策略？Q-Learning 能否？为什么？\n    *   在商业场景中（如在线广告投放、动态定价），使用 Off-Policy 学习（如 Q-Learning）可能有哪些优势？（例如，可以一边用现有稳定策略服务用户，一边利用收集到的数据学习和测试新策略）。\n\n## 提交要求\n\n*   提交你的 Q-Learning 实现代码。\n*   提交 Q-Learning 的奖励曲线图和最终策略可视化图。\n*   提交一份对比分析报告，重点比较 Q-Learning 和 SARSA 的：\n    *   学习过程（奖励曲线）。\n    *   最终策略（路径选择）。\n    *   解释策略差异的原因。\n    *   讨论 Off-Policy 学习相对于 On-Policy 学习的潜在优势，尤其是在商业应用背景下。\n\n---\n\n**下周预告:** Q-Learning 应用讨论与中期回顾。我们将模拟一个简单的商业问题，并复习前半学期的核心概念 (MDP, Bellman, MC, TD, SARSA, Q-Learning)。"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles/custom.css"],"toc":true,"number-sections":false,"include-in-header":[{"text":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\" integrity=\"sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xkm/sYwpb+ilR5gUw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\">\n"}],"output-file":"week7_lecture.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","callout-appearance":"none","title":"Week 7: 异策略控制 - Q-Learning (重点)"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}