---
title: "第五周：项目一展示与深度 Q 网络初探"
---

::: {.callout-tip appearance="simple"}
## 本周学习目标
- 通过项目一展示，了解不同小组的实现思路和优化方法
- 理解 Q-Learning 算法在复杂问题上的局限性
- 掌握深度学习的基本概念，特别是在强化学习中的应用
- 了解深度 Q 网络 (DQN) 的基本原理和关键技术
- 理解经验回放 (Experience Replay) 和目标网络 (Target Network) 的作用
:::

## 第一次课：小组项目一展示与点评

::: {.callout-important}
## 项目展示规范
- 每组展示时间：5-10分钟
- 展示内容：问题定义、算法实现、实验结果、优化方法、遇到的挑战和解决方案
- 展示后问答：5分钟
:::

::: {.callout-note}
## 项目评分标准

### 技术实现 (40%)
- 算法实现的正确性
- 代码质量和结构
- 探索策略的有效性
- 参数调优的合理性

### 实验结果 (30%)
- 算法收敛性
- 智能体表现
- 可视化质量
- 结果分析深度

### 展示质量 (20%)
- 展示清晰度
- 技术表达准确性
- 问题回答能力
- 时间控制

### 团队协作 (10%)
- 任务分工合理性
- 协作效率
- 项目完整性
:::

::: {.callout-tip}
## 优秀项目分享要点
1. 创新性解决方案
2. 有效的探索策略改进
3. 巧妙的奖励函数设计
4. 高效的算法实现
5. 直观的可视化展示
:::

::: {.callout-warning}
## 常见问题与改进方向
- Q表设计不合理
- 探索策略过于简单
- 奖励函数设计不当
- 参数调整不充分
- 代码效率有待提高
- 可视化展示不直观
:::

## 第二次课：深度 Q 网络 (DQN) 详解

::: {.callout-important}
## Q-Learning 的局限性

### 状态空间爆炸问题
- 传统 Q 表无法处理大规模或连续状态空间
- 例如：在 Atari 游戏中，即使假设每个像素只有两种颜色（例如黑白），84×84像素的图像输入也会产生超过2^(84*84)种不同状态。实际上，Atari 游戏通常是彩色的，状态空间会更加庞大。
- 现实问题中状态往往是高维的，表格表示方法不可行

### 泛化能力不足
- 表格型 Q-Learning 无法泛化到未见过的状态
- 每个状态都需要单独学习，样本利用率低
- 无法有效利用状态之间的相似性和共享特征
:::

::: {.callout-note}
## 神经网络基础

### 神经网络结构
- **输入层**：接收状态信息（如游戏屏幕像素或状态向量）
- **隐藏层**：提取特征，发现模式（通常使用ReLU激活函数）
- **输出层**：预测每个动作的 Q 值（通常使用线性激活函数）

### 函数近似
- 神经网络作为函数近似器 Q(s,a;θ)，θ是网络参数
- 输入状态s，输出各动作a的价值估计
- 通过随机梯度下降优化参数θ

### 表示能力
- 能够自动提取状态特征，无需人工设计
- 通过共享参数捕捉状态间的相似性
- 具有强大的泛化能力，能预测未见过状态的价值
:::

::: {.callout-tip}
## 深度 Q 网络 (DQN) 原理

### 基本思想
- 用神经网络替代 Q 表格
- 网络输入：状态向量
- 网络输出：每个动作的 Q 值估计
- 损失函数：均方误差 MSE(target_Q, predicted_Q) 

### 两大关键创新
1. **经验回放 (Experience Replay)**
   - 存储交互经验元组 (s, a, r, s')
   - 从经验缓冲区随机采样进行批量学习
   - 打破样本相关性，提高数据效率，稳定训练

2. **目标网络 (Target Network)**
   - 维护两个网络：Q网络（频繁更新）和目标网络（定期更新）
   - Q网络用于选择动作和当前估计
   - 目标网络用于计算目标Q值
   - 减少目标移动问题，提高训练稳定性

### DQN 算法流程
```python
# 初始化
Q网络和目标网络（相同初始参数）
经验回放缓冲区 D，容量为N

for 每个回合:
    初始化状态 s
    
    for 每个时间步 t:
        # 交互阶段
        根据ε-贪婪策略选择动作 a（基于Q网络）
        执行动作 a，获得奖励 r 和下一状态 s'
        将经验 (s, a, r, s', done) 存入缓冲区 D
        
        # 学习阶段
        从 D 中随机采样小批量经验
        计算目标 Q 值：
            若 s' 为终止状态: y = r
            否则: y = r + γ * max_a' Q'(s', a')  # Q'是目标网络
        
        最小化损失: L = (Q(s, a) - y)²  # Q是Q网络
        使用梯度下降更新Q网络参数
        
        s = s'
        
        # 定期更新目标网络
        每 C 步: 目标网络参数 ← Q网络参数
```

### DQN 完整架构图

```{=html}
<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
    <!-- 背景 -->
    <rect width="800" height="600" fill="#f9f9f9"/>
    
    <!-- 标题 -->
    <text x="400" y="40" font-family="Arial, sans-serif" font-size="24" text-anchor="middle" font-weight="bold">深度Q网络(DQN)架构图</text>
    
    <!-- 智能体容器 -->
    <rect x="60" y="70" width="680" height="480" rx="10" ry="10" fill="#eef6ff" stroke="#0066cc" stroke-width="2" stroke-dasharray="5,5"/>
    <text x="110" y="95" font-family="Arial, sans-serif" font-size="18" fill="#0066cc">DQN智能体</text>
    
    <!-- 环境 -->
    <rect x="100" y="130" width="160" height="80" rx="8" ry="8" fill="#d1e7dd" stroke="#198754" stroke-width="2"/>
    <text x="180" y="175" font-family="Arial, sans-serif" font-size="16" text-anchor="middle" fill="#198754">环境</text>
    <text x="180" y="195" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#198754">(CartPole/Atari)</text>
    
    <!-- Q网络 -->
    <rect x="320" y="130" width="160" height="80" rx="8" ry="8" fill="#cfe2ff" stroke="#0d6efd" stroke-width="2"/>
    <text x="400" y="170" font-family="Arial, sans-serif" font-size="16" text-anchor="middle" fill="#0d6efd">Q网络</text>
    <text x="400" y="190" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#0d6efd">(频繁更新)</text>
    
    <!-- 目标网络 -->
    <rect x="540" y="130" width="160" height="80" rx="8" ry="8" fill="#cfe2ff" stroke="#0d6efd" stroke-width="2"/>
    <text x="620" y="170" font-family="Arial, sans-serif" font-size="16" text-anchor="middle" fill="#0d6efd">目标网络</text>
    <text x="620" y="190" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#0d6efd">(定期更新)</text>
    
    <!-- 经验回放缓冲区 -->
    <rect x="320" y="360" width="160" height="80" rx="8" ry="8" fill="#fff3cd" stroke="#ffc107" stroke-width="2"/>
    <text x="400" y="400" font-family="Arial, sans-serif" font-size="16" text-anchor="middle" fill="#774600">经验回放缓冲区</text>
    <text x="400" y="420" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#774600">(存储和采样经验)</text>
    
    <!-- Q网络到环境的动作选择 -->
    <path d="M320,170 L260,170" stroke="#0d6efd" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
    <text x="290" y="160" font-family="Arial, sans-serif" font-size="12" text-anchor="middle">选择动作</text>
    
    <!-- 环境到经验缓冲区的连接 -->
    <path d="M180,210 L180,300 L320,400" stroke="#198754" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
    <text x="170" y="270" font-family="Arial, sans-serif" font-size="12" text-anchor="middle">经验</text>
    <text x="170" y="285" font-family="Arial, sans-serif" font-size="12" text-anchor="middle">(s,a,r,s',done)</text>
    
    <!-- 经验缓冲区到Q网络的连接 -->
    <path d="M400,360 L400,210" stroke="#ffc107" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
    <text x="420" y="290" font-family="Arial, sans-serif" font-size="12" text-anchor="middle">随机采样批次</text>
    
    <!-- 目标网络用于计算目标值 -->
    <path d="M540,190 L480,190" stroke="#0d6efd" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
    <text x="510" y="210" font-family="Arial, sans-serif" font-size="12" text-anchor="middle">目标Q值</text>
    
    <!-- Q网络到目标网络的更新 -->
    <path d="M480,150 L540,150" stroke="#ff5722" stroke-width="2" fill="none" marker-end="url(#arrowhead)" stroke-dasharray="5,3"/>
    <text x="510" y="140" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#ff5722">定期复制参数</text>
    
    <!-- 损失计算和反向传播 -->
    <rect x="320" y="250" width="160" height="60" rx="8" ry="8" fill="#f8d7da" stroke="#dc3545" stroke-width="2"/>
    <text x="400" y="280" font-family="Arial, sans-serif" font-size="14" text-anchor="middle" fill="#dc3545">TD损失计算</text>
    <text x="400" y="295" font-family="Arial, sans-serif" font-size="11" text-anchor="middle" fill="#dc3545">(Q(s,a) - target)²</text>
    
    <!-- 箭头定义 -->
    <defs>
        <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
            <polygon points="0 0, 10 3.5, 0 7" fill="#333"/>
        </marker>
    </defs>
    
    <!-- 图例 -->
    <rect x="100" y="500" width="600" height="30" rx="5" ry="5" fill="#f8f9fa" stroke="#6c757d" stroke-width="1"/>
    <text x="400" y="520" font-family="Arial, sans-serif" font-size="14" text-anchor="middle">
        <tspan fill="#0d6efd">■ 神经网络</tspan>
        <tspan dx="20" fill="#198754">■ 环境</tspan>
        <tspan dx="20" fill="#774600">■ 经验回放</tspan>
        <tspan dx="20" fill="#dc3545">■ 损失计算</tspan>
    </text>
</svg>
```

上图展示了DQN算法的完整架构，包含了所有核心组件及其交互关系：

1. **环境与智能体交互**：Q网络选择动作，环境返回新状态和奖励
2. **经验存储**：经验元组(s,a,r,s',done)被存储到经验回放缓冲区
3. **批量学习**：从缓冲区随机采样经验批次用于训练
4. **目标计算**：目标网络提供稳定的Q值估计
5. **网络更新**：根据TD损失更新Q网络参数
6. **参数同步**：定期将Q网络参数复制到目标网络

这一架构设计解决了传统Q-learning在处理复杂状态空间时的局限性，通过两大创新（经验回放和目标网络）提高了学习稳定性和效率。
:::

::: {.callout-warning}
## 经验回放详解

### 核心作用
- **打破样本相关性**：连续采样的状态高度相关，随机采样打破这种相关性
- **提高数据效率**：每个经验可以被多次使用，减少环境交互次数
- **稳定训练**：平滑采样分布，减少参数更新的方差
- **均衡经验分布**：不同情景的经验都有机会被学习，避免过拟合

### 实现要点
```python
class ReplayBuffer:
    def __init__(self, capacity):
        self.buffer = deque(maxlen=capacity)  # 固定容量的双端队列
    
    def add(self, state, action, reward, next_state, done):
        # 存储经验元组
        self.buffer.append((state, action, reward, next_state, done))
    
    def sample(self, batch_size):
        # 随机采样批次经验
        experiences = random.sample(self.buffer, batch_size)
        
        # 解析为分离的数组，便于批量处理
        states, actions, rewards, next_states, dones = zip(*experiences)
        return np.array(states), np.array(actions), np.array(rewards), \
               np.array(next_states), np.array(dones)
```

### 进阶版本
- **优先经验回放 (Prioritized Experience Replay)**：根据TD误差分配优先级，重要经验被更频繁采样
- **分层经验回放 (Hindsight Experience Replay)**：重新标记目标，从失败经验中学习
:::

::: {.callout-warning}
## 目标网络详解

### 核心原理
- 在 Q-learning 中使用同一网络同时产生目标和当前估计会导致不稳定
- **移动目标问题**：当前网络参数θ影响目标值，目标值又用于更新θ，形成不稳定循环
- 目标网络"冻结"目标值计算，降低训练不稳定性

### 关键实现
```python
# 初始化
q_network = create_model()      # 主网络
target_network = create_model() # 目标网络
target_network.set_weights(q_network.get_weights())  # 初始权重相同

# 学习过程
def learn(experiences):
    states, actions, rewards, next_states, dones = experiences
    
    # 使用目标网络计算下一状态的最大Q值
    target_q_values = target_network.predict(next_states)
    max_target_q = np.max(target_q_values, axis=1)
    
    # 计算TD目标
    targets = rewards + (gamma * max_target_q * (1 - dones))
    
    # 更新主网络
    current_q = q_network.predict(states)
    for i, action in enumerate(actions):
        current_q[i][action] = targets[i]
    q_network.fit(states, current_q, epochs=1, verbose=0)
    
# 定期更新目标网络
if step % update_frequency == 0:
    target_network.set_weights(q_network.get_weights())
```

### 更新策略
- **硬更新**：每C步完全复制参数（原始DQN方法）
- **软更新**：每步用小比例τ混合参数 θ_target = τ·θ + (1-τ)·θ_target（DDPG等算法采用）
:::

::: {.callout-note}
## DQN 与 Q-Learning 对比

### 相同点
- 都是基于时序差分(TD)学习的价值函数方法
- 都使用最大化动作价值函数(Q)的方法
- 都采用ε-贪婪策略平衡探索与利用
- 都应用折扣因子γ来权衡短期与长期奖励

### 关键区别

| 特性 | 表格型 Q-Learning | 深度 Q 网络 (DQN) |
|------|----------------|----------------|
| 价值表示 | Q表格 | 神经网络 |
| 状态空间 | 小规模离散状态 | 大规模/连续状态 |
| 更新方式 | 单样本更新 | 批量更新 |
| 参数数量 | 状态数×动作数 | 神经网络权重数量 |
| 稳定性技巧 | 无 | 经验回放+目标网络 |
| 泛化能力 | 无 | 强 |
| 样本效率 | 低 | 高 |
| 计算复杂度 | 低 | 高 |
:::

::: {.callout-tip}
## 重要扩展和改进

### 双重DQN (Double DQN)
- 解决Q值过高估计问题
- 使用主网络选择动作，目标网络评估其价值

### 决斗网络架构 (Dueling Network)
- 将Q值分解为状态价值V(s)和优势函数A(s,a)
- Q(s,a) = V(s) + A(s,a) - mean(A(s,:))
- 提高价值估计的稳定性

### 分布式DQN (Distributional DQN)
- 学习奖励分布而非单一期望值
- 捕捉环境的随机性和不确定性

### Rainbow DQN
- 集成六种DQN改进技术
- 包括优先经验回放、多步学习、噪声网络等
:::

::: {.callout-tip}
## 课后作业
1. 阅读DQN原始论文：[Playing Atari with Deep Reinforcement Learning](https://www.cs.toronto.edu/~vmnih/docs/dqn.pdf)
2. 下载并运行本周代码示例，熟悉经验回放和目标网络的实现方式
3. 选择一个简单环境（如CartPole），实现基础版DQN算法
4. 分析不同超参数（如探索率、更新频率）对训练性能的影响
:::

::: {.callout-warning}
## 下周预习重点
1. DQN变体算法（Double DQN、Dueling DQN）的工作原理
2. 连续动作空间强化学习算法（DDPG、SAC）的基础知识
3. 策略梯度方法的基本原理
4. 深度强化学习的稳定性和采样效率问题
::: 